A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE     1


MACRO ASSEMBLER A51 V8.02
OBJECT MODULE PLACED IN .\bin\obj\OS_CPU_C.OBJ
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE .\bin\obj\OS_CPU_C.src PR(.\bin\lst\OS_CPU_C.ls1) EP DEBUG

LOC  OBJ            LINE     SOURCE

                       1     ; .\bin\obj\OS_CPU_C.SRC generated from: src\arch\OS_CPU_C.C
                       2     ; COMPILER INVOKED BY:
                       3     ;        C:\Keil\C51\BIN\C51.EXE src\arch\OS_CPU_C.C LARGE WARNINGLEVEL(0) OPTIMIZE(SIZE) R
                             EGFILE(.\bin\obj\kernel.ORC) BROWSE ORDER NOAREGS INCDIR(src\include) DEBUG OBJECTEXTEND NO
                             COND PRINT(.\bin\lst\OS_CPU_C.lst) SRC(.\bin\obj\OS_CPU_C.SRC)
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    OS_CPU_C
                       8     
  0080                 9     P0      DATA    080H
  0090                10     P1      DATA    090H
  00A0                11     P2      DATA    0A0H
  00B0                12     P3      DATA    0B0H
  00D0                13     PSW     DATA    0D0H
  00E0                14     ACC     DATA    0E0H
  00F0                15     B       DATA    0F0H
  0081                16     SP      DATA    081H
  0082                17     DPL     DATA    082H
  0083                18     DPH     DATA    083H
  0087                19     PCON    DATA    087H
  0088                20     TCON    DATA    088H
  0089                21     TMOD    DATA    089H
  008A                22     TL0     DATA    08AH
  008B                23     TL1     DATA    08BH
  008C                24     TH0     DATA    08CH
  008D                25     TH1     DATA    08DH
  00A8                26     IE      DATA    0A8H
  00B8                27     IP      DATA    0B8H
  0098                28     SCON    DATA    098H
  0099                29     SBUF    DATA    099H
  00C8                30     T2CON   DATA    0C8H
  00CA                31     RCAP2L  DATA    0CAH
  00CB                32     RCAP2H  DATA    0CBH
  00CC                33     TL2     DATA    0CCH
  00CD                34     TH2     DATA    0CDH
  00D7                35     CY      BIT     0D0H.7
  00D6                36     AC      BIT     0D0H.6
  00D5                37     F0      BIT     0D0H.5
  00D4                38     RS1     BIT     0D0H.4
  00D3                39     RS0     BIT     0D0H.3
  00D2                40     OV      BIT     0D0H.2
  00D0                41     P       BIT     0D0H.0
  008F                42     TF1     BIT     088H.7
  008E                43     TR1     BIT     088H.6
  008D                44     TF0     BIT     088H.5
  008C                45     TR0     BIT     088H.4
  008B                46     IE1     BIT     088H.3
  008A                47     IT1     BIT     088H.2
  0089                48     IE0     BIT     088H.1
  0088                49     IT0     BIT     088H.0
  00AF                50     EA      BIT     0A8H.7
  00AD                51     ET2     BIT     0A8H.5
  00AC                52     ES      BIT     0A8H.4
  00AB                53     ET1     BIT     0A8H.3
  00AA                54     EX1     BIT     0A8H.2
  00A9                55     ET0     BIT     0A8H.1
  00A8                56     EX0     BIT     0A8H.0
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE     2

  00BD                57     PT2     BIT     0B8H.5
  00BC                58     PS      BIT     0B8H.4
  00BB                59     PT1     BIT     0B8H.3
  00BA                60     PX1     BIT     0B8H.2
  00B9                61     PT0     BIT     0B8H.1
  00B8                62     PX0     BIT     0B8H.0
  00B7                63     RD      BIT     0B0H.7
  00B6                64     WR      BIT     0B0H.6
  00B5                65     T1      BIT     0B0H.5
  00B4                66     T0      BIT     0B0H.4
  00B3                67     INT1    BIT     0B0H.3
  00B2                68     INT0    BIT     0B0H.2
  00B1                69     TXD     BIT     0B0H.1
  00B0                70     RXD     BIT     0B0H.0
  009F                71     SM0     BIT     098H.7
  009E                72     SM1     BIT     098H.6
  009D                73     SM2     BIT     098H.5
  009C                74     REN     BIT     098H.4
  009B                75     TB8     BIT     098H.3
  009A                76     RB8     BIT     098H.2
  0099                77     TI      BIT     098H.1
  0098                78     RI      BIT     098H.0
  0091                79     T2EX    BIT     090H.1
  0090                80     T2      BIT     090H.0
  00CF                81     TF2     BIT     0C8H.7
  00CE                82     EXF2    BIT     0C8H.6
  00CD                83     RCLK    BIT     0C8H.5
  00CC                84     TCLK    BIT     0C8H.4
  00CB                85     EXEN2   BIT     0C8H.3
  00CA                86     TR2     BIT     0C8H.2
  00C9                87     C_T2    BIT     0C8H.1
  00C8                88     CP_RL2  BIT     0C8H.0
                      89     ?PR?_?OSTaskStkInit?OS_CPU_C             SEGMENT CODE 
                      90     ?PR?_?OSStartHighRdy?OS_CPU_C            SEGMENT CODE 
                      91     ?PR?_?C_OSCtxSw?OS_CPU_C                 SEGMENT CODE 
                      92     ?PR?_?OSIntCtxSw?OS_CPU_C                SEGMENT CODE 
                      93     ?PR?OSTickISR?OS_CPU_C                   SEGMENT CODE 
                      94     ?PR?_?initSystem?OS_CPU_C                SEGMENT CODE 
                      95     ?PR?_?SetupComms?OS_CPU_C                SEGMENT CODE 
                      96     ?PR?_?SendChar?OS_CPU_C                  SEGMENT CODE 
                      97     ?PR?_?SendString?OS_CPU_C                SEGMENT CODE 
                      98     ?PR?Serial_ISR?OS_CPU_C                  SEGMENT CODE 
                      99     ?PR?_?OSInitHookBegin?OS_CPU_C           SEGMENT CODE 
                     100     ?PR?_?OSInitHookEnd?OS_CPU_C             SEGMENT CODE 
                     101     ?PR?_?OSTaskCreateHook?OS_CPU_C          SEGMENT CODE 
                     102     ?PR?_?OSTaskDelHook?OS_CPU_C             SEGMENT CODE 
                     103     ?PR?_?OSTaskSwHook?OS_CPU_C              SEGMENT CODE 
                     104     ?PR?_?OSTaskStatHook?OS_CPU_C            SEGMENT CODE 
                     105     ?PR?_?OSTCBInitHook?OS_CPU_C             SEGMENT CODE 
                     106     ?PR?_?OSTimeTickHook?OS_CPU_C            SEGMENT CODE 
                     107     ?PR?_?OSTaskIdleHook?OS_CPU_C            SEGMENT CODE 
                     108     ?C_INITSEG           SEGMENT CODE 
                     109     ?DT?OS_CPU_C         SEGMENT DATA 
                     110             EXTRN   XDATA (OSIntNesting)
                     111             EXTRN   XDATA (OSPrioCur)
                     112             EXTRN   XDATA (OSPrioHighRdy)
                     113             EXTRN   XDATA (OSRunning)
                     114             EXTRN   XDATA (OSTCBCur)
                     115             EXTRN   XDATA (OSTCBHighRdy)
                     116             EXTRN   CODE (_?OSTimeTick)
                     117             EXTRN   CODE (_?OSIntEnter)
                     118             EXTRN   CODE (_?OSIntExit)
                     119             EXTRN   IDATA (Stack)
                     120             EXTRN   DATA (C_XBP)
                     121             EXTRN   CODE (_?LoadCtx)
                     122             EXTRN   CODE (?C?ADDXBP)
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE     3

                     123             EXTRN   CODE (?C?PSTXDATA)
                     124             EXTRN   CODE (?C?XBPOFF)
                     125             EXTRN   CODE (?C?PLDXDATA)
                     126             EXTRN   DATA (?C_XBP)
                     127             EXTRN   CODE (?C?IILDX)
                     128             EXTRN   CODE (?C?PSTPTR)
                     129             EXTRN   CODE (?C?ISTPTR)
                     130             EXTRN   CODE (?C?PILDXDATA)
                     131             EXTRN   CODE (?C?CSTPTR)
                     132             EXTRN   CODE (?C?PLDPTR)
                     133             EXTRN   CODE (?C?CLDPTR)
                     134             EXTRN   CODE (?C?PLDIXDATA)
                     135             PUBLIC  SaveSP
                     136             PUBLIC  RxBuffer
                     137             PUBLIC  _?OSTaskIdleHook
                     138             PUBLIC  _?OSTimeTickHook
                     139             PUBLIC  _?OSTCBInitHook
                     140             PUBLIC  _?OSTaskStatHook
                     141             PUBLIC  _?OSTaskSwHook
                     142             PUBLIC  _?OSTaskDelHook
                     143             PUBLIC  _?OSTaskCreateHook
                     144             PUBLIC  _?OSInitHookEnd
                     145             PUBLIC  _?OSInitHookBegin
                     146             PUBLIC  Serial_ISR
                     147             PUBLIC  _?SendString
                     148             PUBLIC  _?SendChar
                     149             PUBLIC  _?SetupComms
                     150             PUBLIC  _?initSystem
                     151             PUBLIC  OSTickISR
                     152             PUBLIC  _?OSIntCtxSw
                     153             PUBLIC  _?C_OSCtxSw
                     154             PUBLIC  _?OSStartHighRdy
                     155             PUBLIC  _?OSTaskStkInit
                     156     
----                 157             RSEG  ?DT?OS_CPU_C
0000                 158            RxBuffer:   DS   1
0001                 159              SaveSP:   DS   1
                     160     
----                 161             RSEG  ?C_INITSEG
0000 01              162             DB      001H
0001 00       F      163             DB      RxBuffer
0002 00              164             DB      000H
                     165     
                     166     ; /****************************************************************************************
                             ****************
                     167     ; 
                     168     ; *****************************************************************************************
                             ***************/
                     169     ; 
                     170     ; #define  OS_CPU_GLOBALS
                     171     ; #include "includes.h"
                     172     ; 
                     173     ; #undef data
                     174     ; #undef pdata
                     175     ; #undef xdata
                     176     ; #undef idata
                     177     ; 
                     178     ; 
                     179     ; /* Local variable definitions */
                     180     ; OS_EXT OS_TCB *OSTCBHighRdy;
                     181     ; data INT8U RxBuffer = 0;
                     182     ; INT8U data SaveSP;
                     183     ; 
                     184     ; /* External variable definitions */
                     185     ; extern idata INT8U Stack[1];
                     186     ; extern INT8U xdata * data C_XBP;
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE     4

                     187     ; 
                     188     ; /* Local function definitions */
                     189     ; void LoadCtx() KCREENTRANT;
                     190     ; 
                     191     ; 
                     192     ; /****************************************************************************************
                             ****************
                     193     ; *                                        INITIALIZE A TASK'S STACK
                     194     ; *
                     195     ; * Description: This function is called by either OSTaskCreate() or OSTaskCreateExt() to i
                             nitialize the
                     196     ; *              stack frame of the task being created.  This function is highly processor 
                             specific.
                     197     ; *
                     198     ; * Arguments  : task          is a pointer to the task code
                     199     ; *
                     200     ; *              pdata         is a pointer to a user supplied data area that will be passe
                             d to the task
                     201     ; *                            when the task first executes.
                     202     ; *
                     203     ; *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos'
                              points to
                     204     ; *                            a 'free' entry on the task stack.  If OS_STK_GROWTH is set t
                             o 1 then 
                     205     ; *                            'ptos' will contain the HIGHEST valid address of the stack. 
                              Similarly, if
                     206     ; *                            OS_STK_GROWTH is set to 0, the 'ptos' will contains the LOWE
                             ST valid address
                     207     ; *                            of the stack.
                     208     ; *
                     209     ; *              opt           specifies options that can be used to alter the behavior of 
                             OSTaskStkInit().
                     210     ; *                            (see uCOS_II.H for OS_TASK_OPT_???).
                     211     ; *
                     212     ; * Returns    : Always returns the location of the new top-of-stack' once the processor re
                             gisters have
                     213     ; *              been placed on the stack in the proper order.
                     214     ; *
                     215     ; * Note(s)    : Interrupts are enabled when your task starts executing. You can change thi
                             s by setting the
                     216     ; *              PSW to 0x0002 instead.  In this case, interrupts would be disabled upon ta
                             sk startup.  The
                     217     ; *              application code would be responsible for enabling interrupts at the begin
                             ning of the task
                     218     ; *              code.  You will need to modify OSTaskIdle() and OSTaskStat() so that they 
                             enable 
                     219     ; *              interrupts.  Failure to do this will make your system crash!
                     220     ; *****************************************************************************************
                             *****************/
                     221     ; OS_STK *OSTaskStkInit (void (*task)(void *pd) KCREENTRANT, void *ptd, OS_STK *ptos, INT16
                             U opt) KCREENTRANT
                     222     
----                 223             RSEG  ?PR?_?OSTaskStkInit?OS_CPU_C
0000                 224     _?OSTaskStkInit:
                     225             USING   0
                     226                             ; SOURCE LINE # 56
0000 90FFFD          227             MOV     DPTR,#0FFFDH
0003 120000   F      228             LCALL   ?C?ADDXBP
0006 120000   F      229             LCALL   ?C?PSTXDATA
0009 90FFFD          230             MOV     DPTR,#0FFFDH
000C 120000   F      231             LCALL   ?C?ADDXBP
                     232     ; {
                     233     ;   INT8U *stk;
                     234     ; 
                     235     ;   /* 'opt' is not used, prevent warning */
                     236     ;   opt = opt;
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE     5

                     237                             ; SOURCE LINE # 61
000F 90000C          238             MOV     DPTR,#0CH
0012 120000   F      239             LCALL   ?C?XBPOFF
0015 E0              240             MOVX    A,@DPTR
0016 FE              241             MOV     R6,A
0017 A3              242             INC     DPTR
0018 E0              243             MOVX    A,@DPTR
0019 FF              244             MOV     R7,A
001A 90000C          245             MOV     DPTR,#0CH
001D 120000   F      246             LCALL   ?C?XBPOFF
0020 EE              247             MOV     A,R6
0021 F0              248             MOVX    @DPTR,A
0022 A3              249             INC     DPTR
0023 EF              250             MOV     A,R7
0024 F0              251             MOVX    @DPTR,A
                     252     ;   
                     253     ;   /* Get pointer to the top of the stack */                       
                     254     ;   stk = (INT8U *)(ptos);                
                     255                             ; SOURCE LINE # 64
0025 900009          256             MOV     DPTR,#09H
0028 120000   F      257             LCALL   ?C?XBPOFF
002B 120000   F      258             LCALL   ?C?PLDXDATA
002E 850083   F      259             MOV     DPH,?C_XBP
0031 850082   F      260             MOV     DPL,?C_XBP+01H
0034 120000   F      261             LCALL   ?C?PSTXDATA
                     262     ; 
                     263     ;   /* Save the ptd to external stack */
                     264     ;   stk -= sizeof(void *);    
                     265                             ; SOURCE LINE # 67
0037 850083   F      266             MOV     DPH,?C_XBP
003A 850082   F      267             MOV     DPL,?C_XBP+01H
003D A3              268             INC     DPTR
003E 74FF            269             MOV     A,#0FFH
0040 75F0FD          270             MOV     B,#0FDH
0043 120000   F      271             LCALL   ?C?IILDX
                     272     ;   *(void**)stk = ptd;
                     273                             ; SOURCE LINE # 68
0046 900006          274             MOV     DPTR,#06H
0049 120000   F      275             LCALL   ?C?XBPOFF
004C 120000   F      276             LCALL   ?C?PLDXDATA
004F EB              277             MOV     A,R3
0050 C0E0            278             PUSH    ACC
0052 EA              279             MOV     A,R2
0053 C0E0            280             PUSH    ACC
0055 E9              281             MOV     A,R1
0056 C0E0            282             PUSH    ACC
0058 850083   F      283             MOV     DPH,?C_XBP
005B 850082   F      284             MOV     DPL,?C_XBP+01H
005E 120000   F      285             LCALL   ?C?PLDXDATA
0061 120000   F      286             LCALL   ?C?PSTPTR
                     287     ; 
                     288     ;   /* The value should be loaded to PC next time when this task is running*/
                     289     ;   stk -= sizeof(INT16U);
                     290                             ; SOURCE LINE # 71
0064 850083   F      291             MOV     DPH,?C_XBP
0067 850082   F      292             MOV     DPL,?C_XBP+01H
006A A3              293             INC     DPTR
006B 74FF            294             MOV     A,#0FFH
006D 75F0FE          295             MOV     B,#0FEH
0070 120000   F      296             LCALL   ?C?IILDX
                     297     ;   *(INT16U*)(stk) = (INT16U)(task);
                     298                             ; SOURCE LINE # 72
0073 900003          299             MOV     DPTR,#03H
0076 120000   F      300             LCALL   ?C?XBPOFF
0079 120000   F      301             LCALL   ?C?PLDXDATA
007C CE              302             XCH     A,R6
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE     6

007D EA              303             MOV     A,R2
007E CE              304             XCH     A,R6
007F CF              305             XCH     A,R7
0080 E9              306             MOV     A,R1
0081 CF              307             XCH     A,R7
0082 850083   F      308             MOV     DPH,?C_XBP
0085 850082   F      309             MOV     DPL,?C_XBP+01H
0088 120000   F      310             LCALL   ?C?PLDXDATA
008B EE              311             MOV     A,R6
008C 8FF0            312             MOV     B,R7
008E 120000   F      313             LCALL   ?C?ISTPTR
                     314     ; 
                     315     ;     /* The value should be loaded to PC next time when this task is running*/
                     316     ;   stk -= sizeof(INT16U);
                     317                             ; SOURCE LINE # 75
0091 850083   F      318             MOV     DPH,?C_XBP
0094 850082   F      319             MOV     DPL,?C_XBP+01H
0097 A3              320             INC     DPTR
0098 74FF            321             MOV     A,#0FFH
009A 75F0FE          322             MOV     B,#0FEH
009D 120000   F      323             LCALL   ?C?IILDX
                     324     ;   *(INT16U*)(stk) = (INT16U)(task);
                     325                             ; SOURCE LINE # 76
00A0 900003          326             MOV     DPTR,#03H
00A3 120000   F      327             LCALL   ?C?XBPOFF
00A6 120000   F      328             LCALL   ?C?PLDXDATA
00A9 CE              329             XCH     A,R6
00AA EA              330             MOV     A,R2
00AB CE              331             XCH     A,R6
00AC CF              332             XCH     A,R7
00AD E9              333             MOV     A,R1
00AE CF              334             XCH     A,R7
00AF 850083   F      335             MOV     DPH,?C_XBP
00B2 850082   F      336             MOV     DPL,?C_XBP+01H
00B5 120000   F      337             LCALL   ?C?PLDXDATA
00B8 EE              338             MOV     A,R6
00B9 8FF0            339             MOV     B,R7
00BB 120000   F      340             LCALL   ?C?ISTPTR
                     341     ; 
                     342     ;   /* Following is the registers pushed into hardware stack */
                     343     ;   *--stk = 'A';                 /* ACC */
                     344                             ; SOURCE LINE # 79
00BE 850083   F      345             MOV     DPH,?C_XBP
00C1 850082   F      346             MOV     DPL,?C_XBP+01H
00C4 74FF            347             MOV     A,#0FFH
00C6 F5F0            348             MOV     B,A
00C8 120000   F      349             LCALL   ?C?PILDXDATA
00CB 7441            350             MOV     A,#041H
00CD 120000   F      351             LCALL   ?C?CSTPTR
                     352     ;   *--stk = 'B';                 /* B   */
                     353                             ; SOURCE LINE # 80
00D0 850083   F      354             MOV     DPH,?C_XBP
00D3 850082   F      355             MOV     DPL,?C_XBP+01H
00D6 74FF            356             MOV     A,#0FFH
00D8 F5F0            357             MOV     B,A
00DA 120000   F      358             LCALL   ?C?PILDXDATA
00DD 7442            359             MOV     A,#042H
00DF 120000   F      360             LCALL   ?C?CSTPTR
                     361     ;   *--stk = 'H';                 /* DPH */
                     362                             ; SOURCE LINE # 81
00E2 850083   F      363             MOV     DPH,?C_XBP
00E5 850082   F      364             MOV     DPL,?C_XBP+01H
00E8 74FF            365             MOV     A,#0FFH
00EA F5F0            366             MOV     B,A
00EC 120000   F      367             LCALL   ?C?PILDXDATA
00EF 7448            368             MOV     A,#048H
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE     7

00F1 120000   F      369             LCALL   ?C?CSTPTR
                     370     ;   *--stk = 'L';                 /* DPL */
                     371                             ; SOURCE LINE # 82
00F4 850083   F      372             MOV     DPH,?C_XBP
00F7 850082   F      373             MOV     DPL,?C_XBP+01H
00FA 74FF            374             MOV     A,#0FFH
00FC F5F0            375             MOV     B,A
00FE 120000   F      376             LCALL   ?C?PILDXDATA
0101 744C            377             MOV     A,#04CH
0103 120000   F      378             LCALL   ?C?CSTPTR
                     379     ;   *--stk = PSW;                 /* PSW */
                     380                             ; SOURCE LINE # 83
0106 850083   F      381             MOV     DPH,?C_XBP
0109 850082   F      382             MOV     DPL,?C_XBP+01H
010C 74FF            383             MOV     A,#0FFH
010E F5F0            384             MOV     B,A
0110 120000   F      385             LCALL   ?C?PILDXDATA
0113 E5D0            386             MOV     A,PSW
0115 120000   F      387             LCALL   ?C?CSTPTR
                     388     ;   *--stk = 0;                   /* R0  */
                     389                             ; SOURCE LINE # 84
0118 850083   F      390             MOV     DPH,?C_XBP
011B 850082   F      391             MOV     DPL,?C_XBP+01H
011E 74FF            392             MOV     A,#0FFH
0120 F5F0            393             MOV     B,A
0122 120000   F      394             LCALL   ?C?PILDXDATA
0125 E4              395             CLR     A
0126 120000   F      396             LCALL   ?C?CSTPTR
                     397     ; 
                     398     ;   stk -= sizeof(void *);        /* R1,R2,R3 */
                     399                             ; SOURCE LINE # 86
0129 850083   F      400             MOV     DPH,?C_XBP
012C 850082   F      401             MOV     DPL,?C_XBP+01H
012F A3              402             INC     DPTR
0130 74FF            403             MOV     A,#0FFH
0132 75F0FD          404             MOV     B,#0FDH
0135 120000   F      405             LCALL   ?C?IILDX
                     406     ;   *(void**)stk = ptd;            /* functions args */       
                     407                             ; SOURCE LINE # 87
0138 900006          408             MOV     DPTR,#06H
013B 120000   F      409             LCALL   ?C?XBPOFF
013E 120000   F      410             LCALL   ?C?PLDXDATA
0141 EB              411             MOV     A,R3
0142 C0E0            412             PUSH    ACC
0144 EA              413             MOV     A,R2
0145 C0E0            414             PUSH    ACC
0147 E9              415             MOV     A,R1
0148 C0E0            416             PUSH    ACC
014A 850083   F      417             MOV     DPH,?C_XBP
014D 850082   F      418             MOV     DPL,?C_XBP+01H
0150 120000   F      419             LCALL   ?C?PLDXDATA
0153 120000   F      420             LCALL   ?C?PSTPTR
                     421     ; 
                     422     ;   *--stk = 0x04;                /* R4  */
                     423                             ; SOURCE LINE # 89
0156 850083   F      424             MOV     DPH,?C_XBP
0159 850082   F      425             MOV     DPL,?C_XBP+01H
015C 74FF            426             MOV     A,#0FFH
015E F5F0            427             MOV     B,A
0160 120000   F      428             LCALL   ?C?PILDXDATA
0163 7404            429             MOV     A,#04H
0165 120000   F      430             LCALL   ?C?CSTPTR
                     431     ;   *--stk = 0x05;                /* R5  */
                     432                             ; SOURCE LINE # 90
0168 850083   F      433             MOV     DPH,?C_XBP
016B 850082   F      434             MOV     DPL,?C_XBP+01H
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE     8

016E 74FF            435             MOV     A,#0FFH
0170 F5F0            436             MOV     B,A
0172 120000   F      437             LCALL   ?C?PILDXDATA
0175 7405            438             MOV     A,#05H
0177 120000   F      439             LCALL   ?C?CSTPTR
                     440     ;   *--stk = 0x06;                /* R6  */
                     441                             ; SOURCE LINE # 91
017A 850083   F      442             MOV     DPH,?C_XBP
017D 850082   F      443             MOV     DPL,?C_XBP+01H
0180 74FF            444             MOV     A,#0FFH
0182 F5F0            445             MOV     B,A
0184 120000   F      446             LCALL   ?C?PILDXDATA
0187 7406            447             MOV     A,#06H
0189 120000   F      448             LCALL   ?C?CSTPTR
                     449     ;   *--stk = 0x07;                /* R7  */
                     450                             ; SOURCE LINE # 92
018C 850083   F      451             MOV     DPH,?C_XBP
018F 850082   F      452             MOV     DPL,?C_XBP+01H
0192 74FF            453             MOV     A,#0FFH
0194 F5F0            454             MOV     B,A
0196 120000   F      455             LCALL   ?C?PILDXDATA
0199 7407            456             MOV     A,#07H
019B 120000   F      457             LCALL   ?C?CSTPTR
                     458     ;   *--stk = 0x80;                /* IE, EA is enabled  */
                     459                             ; SOURCE LINE # 93
019E 850083   F      460             MOV     DPH,?C_XBP
01A1 850082   F      461             MOV     DPL,?C_XBP+01H
01A4 74FF            462             MOV     A,#0FFH
01A6 F5F0            463             MOV     B,A
01A8 120000   F      464             LCALL   ?C?PILDXDATA
01AB 7480            465             MOV     A,#080H
01AD 120000   F      466             LCALL   ?C?CSTPTR
                     467     ; 
                     468     ;   /* Next is calculating the hardware stack pointer */
                     469     ;   *--stk = (INT8U)(Stack-1) + 14 + sizeof(INT16U) + sizeof(INT16U);
                     470                             ; SOURCE LINE # 96
01B0 7400     F      471             MOV     A,#LOW (Stack+0FFFFH)
01B2 2412            472             ADD     A,#012H
01B4 FF              473             MOV     R7,A
01B5 850083   F      474             MOV     DPH,?C_XBP
01B8 850082   F      475             MOV     DPL,?C_XBP+01H
01BB 74FF            476             MOV     A,#0FFH
01BD F5F0            477             MOV     B,A
01BF 120000   F      478             LCALL   ?C?PILDXDATA
01C2 EF              479             MOV     A,R7
01C3 120000   F      480             LCALL   ?C?CSTPTR
                     481     ; 
                     482     ;   /* Return the top-of-stack address */
                     483     ;   return ((void *)stk);
                     484                             ; SOURCE LINE # 99
01C6 850083   F      485             MOV     DPH,?C_XBP
01C9 850082   F      486             MOV     DPL,?C_XBP+01H
01CC 120000   F      487             LCALL   ?C?PLDXDATA
                     488     ; }
                     489                             ; SOURCE LINE # 100
01CF                 490     ?C0001:
01CF 90000E          491             MOV     DPTR,#0EH
01D2 020000   F      492             LJMP    ?C?ADDXBP
                     493     ; END OF _?OSTaskStkInit
                     494     
                     495     ; 
                     496     ; 
                     497     ; /*
                     498     ; *****************************************************************************************
                             ******************
                     499     ; * OSStartHighRdy: START MULTITASKING
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE     9

                     500     ; *     
                     501     ; * Duty:     a) Call OSTaskSwHook() then,
                     502     ; *           b) Set OSRunning to TRUE,
                     503     ; *           c) Switch to the highest priority task.
                     504     ; *
                     505     ; *****************************************************************************************
                             ******************
                     506     ; */
                     507     ; void OSStartHighRdy(void) KCREENTRANT
                     508     
----                 509             RSEG  ?PR?_?OSStartHighRdy?OS_CPU_C
0000                 510     _?OSStartHighRdy:
                     511             USING   0
                     512                             ; SOURCE LINE # 113
                     513     ; {
                     514     ;   OSTaskSwHook();
                     515                             ; SOURCE LINE # 115
0000 120000   F      516             LCALL   _?OSTaskSwHook
                     517     ;   
                     518     ;   OSRunning = 1;
                     519                             ; SOURCE LINE # 117
0003 900000   F      520             MOV     DPTR,#OSRunning
0006 7401            521             MOV     A,#01H
0008 F0              522             MOVX    @DPTR,A
                     523     ; 
                     524     ;   C_XBP = OSTCBHighRdy->OSTCBStkPtr;
                     525                             ; SOURCE LINE # 119
0009 900000   F      526             MOV     DPTR,#OSTCBHighRdy
000C 120000   F      527             LCALL   ?C?PLDXDATA
000F 120000   F      528             LCALL   ?C?PLDPTR
0012 CF              529             XCH     A,R7
0013 E9              530             MOV     A,R1
0014 CF              531             XCH     A,R7
0015 8A00     F      532             MOV     C_XBP,R2
0017 8F00     F      533             MOV     C_XBP+01H,R7
                     534     ; 
                     535     ;   LoadCtx();
                     536                             ; SOURCE LINE # 121
0019 020000   F      537             LJMP    _?LoadCtx
                     538     ; END OF _?OSStartHighRdy
                     539     
                     540     ; }
                     541     ; 
                     542     ; /****************************************************************************************
                             ******************
                     543     ; * C_OSCtxSw is the c part of OSCtxSw.
                     544     ; * When control passes to this function, the processor registers have been saved in extern
                             al stack
                     545     ; *****************************************************************************************
                             ******************/
                     546     ; void C_OSCtxSw(void) KCREENTRANT
                     547     
----                 548             RSEG  ?PR?_?C_OSCtxSw?OS_CPU_C
0000                 549     _?C_OSCtxSw:
                     550             USING   0
                     551                             ; SOURCE LINE # 128
                     552     ; {
                     553     ;   OSTCBCur -> OSTCBStkPtr = C_XBP;
                     554                             ; SOURCE LINE # 130
0000 AA00     F      555             MOV     R2,C_XBP
0002 A900     F      556             MOV     R1,C_XBP+01H
0004 7B01            557             MOV     R3,#01H
0006 EB              558             MOV     A,R3
0007 C0E0            559             PUSH    ACC
0009 EA              560             MOV     A,R2
000A C0E0            561             PUSH    ACC
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    10

000C E9              562             MOV     A,R1
000D C0E0            563             PUSH    ACC
000F 900000   F      564             MOV     DPTR,#OSTCBCur
0012 120000   F      565             LCALL   ?C?PLDXDATA
0015 120000   F      566             LCALL   ?C?PSTPTR
                     567     ;   OSTaskSwHook();
                     568                             ; SOURCE LINE # 131
0018 120000   F      569             LCALL   _?OSTaskSwHook
                     570     ;   OSTCBCur = OSTCBHighRdy;
                     571                             ; SOURCE LINE # 132
001B 900000   F      572             MOV     DPTR,#OSTCBHighRdy
001E 120000   F      573             LCALL   ?C?PLDXDATA
0021 900000   F      574             MOV     DPTR,#OSTCBCur
0024 120000   F      575             LCALL   ?C?PSTXDATA
                     576     ;   OSPrioCur = OSPrioHighRdy;
                     577                             ; SOURCE LINE # 133
0027 900000   F      578             MOV     DPTR,#OSPrioHighRdy
002A E0              579             MOVX    A,@DPTR
002B 900000   F      580             MOV     DPTR,#OSPrioCur
002E F0              581             MOVX    @DPTR,A
                     582     ;   C_XBP = OSTCBCur -> OSTCBStkPtr;
                     583                             ; SOURCE LINE # 134
002F 120000   F      584             LCALL   ?C?PLDPTR
0032 CF              585             XCH     A,R7
0033 E9              586             MOV     A,R1
0034 CF              587             XCH     A,R7
0035 8A00     F      588             MOV     C_XBP,R2
0037 8F00     F      589             MOV     C_XBP+01H,R7
                     590     ;   LoadCtx();
                     591                             ; SOURCE LINE # 135
0039 020000   F      592             LJMP    _?LoadCtx
                     593     ; END OF _?C_OSCtxSw
                     594     
                     595     ; }
                     596     ; 
                     597     ; /****************************************************************************************
                             ******************
                     598     ; * void OSIntCtxSw(void)
                     599     ; * 
                     600     ; *****************************************************************************************
                             ******************/
                     601     ; void OSIntCtxSw(void) KCREENTRANT
                     602     
----                 603             RSEG  ?PR?_?OSIntCtxSw?OS_CPU_C
0000                 604     _?OSIntCtxSw:
                     605             USING   0
                     606                             ; SOURCE LINE # 142
                     607     ; {
                     608     ; #pragma ASM
                     609     ;         CLR EA
0000 C2AF            610               CLR EA
                     611     ;         MOV SP, SaveSP
0002 850081   F      612               MOV SP, SaveSP
                     613     ; #pragma ENDASM
                     614     ; 
                     615     ;   C_XBP = OSTCBCur->OSTCBStkPtr;
                     616                             ; SOURCE LINE # 149
0005 900000   F      617             MOV     DPTR,#OSTCBCur
0008 120000   F      618             LCALL   ?C?PLDXDATA
000B 120000   F      619             LCALL   ?C?PLDPTR
000E CF              620             XCH     A,R7
000F E9              621             MOV     A,R1
0010 CF              622             XCH     A,R7
0011 8A00     F      623             MOV     C_XBP,R2
0013 8F00     F      624             MOV     C_XBP+01H,R7
                     625     ; 
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    11

                     626     ; #pragma ASM
                     627     ;         EXTRN   CODE(_?KCOSCtxSw)
                     628               EXTRN   CODE(_?KCOSCtxSw)
                     629     ;         MOV   A, #LOW  _?KCOSCtxSw
0015 7400     F      630               MOV   A, #LOW  _?KCOSCtxSw
                     631     ;         PUSH  ACC
0017 C0E0            632               PUSH  ACC
                     633     ;         MOV   A, #HIGH _?KCOSCtxSw
0019 7400     F      634               MOV   A, #HIGH _?KCOSCtxSw
                     635     ;         PUSH  ACC
001B C0E0            636               PUSH  ACC
                     637     ;         RETI
001D 32              638               RETI
                     639     ; #pragma ENDASM
                     640     ; }
                     641                             ; SOURCE LINE # 159
001E 22              642             RET     
                     643     ; END OF _?OSIntCtxSw
                     644     
----                 645     CSEG    AT      0000BH
000B 020000   F      646             LJMP    OSTickISR
                     647     
                     648     ; 
                     649     ; /****************************************************************************************
                             ******************
                     650     ; * void OSTickISR(void)
                     651     ; * 
                     652     ; *****************************************************************************************
                             *****************/
                     653     ; void OSTickISR(void) interrupt 1
                     654     
----                 655             RSEG  ?PR?OSTickISR?OS_CPU_C
                     656             USING   0
0000                 657     OSTickISR:
0000 C0E0            658             PUSH    ACC
0002 C0F0            659             PUSH    B
0004 C083            660             PUSH    DPH
0006 C082            661             PUSH    DPL
0008 C0D0            662             PUSH    PSW
000A E8              663             MOV     A,R0
000B C0E0            664             PUSH    ACC
000D E9              665             MOV     A,R1
000E C0E0            666             PUSH    ACC
0010 EA              667             MOV     A,R2
0011 C0E0            668             PUSH    ACC
0013 EB              669             MOV     A,R3
0014 C0E0            670             PUSH    ACC
0016 EC              671             MOV     A,R4
0017 C0E0            672             PUSH    ACC
0019 ED              673             MOV     A,R5
001A C0E0            674             PUSH    ACC
001C EE              675             MOV     A,R6
001D C0E0            676             PUSH    ACC
001F EF              677             MOV     A,R7
0020 C0E0            678             PUSH    ACC
                     679             USING   0
                     680                             ; SOURCE LINE # 165
                     681     ; {
                     682     ;   /* Must be called first at every hardware interrupt entry point */
                     683     ;   OSIntEnter();
                     684                             ; SOURCE LINE # 168
0022 120000   F      685             LCALL   _?OSIntEnter
                     686     ;     
                     687     ;   if(OSIntNesting == 1)
                     688                             ; SOURCE LINE # 170
0025 900000   F      689             MOV     DPTR,#OSIntNesting
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    12

0028 E0              690             MOVX    A,@DPTR
0029 B40121          691             CJNE    A,#01H,?C0005
                     692     ;   {
                     693                             ; SOURCE LINE # 171
                     694     ;     #pragma ASM
                     695     ;             PUSH IE
002C C0A8            696               PUSH IE
                     697     ;             CLR  EA
002E C2AF            698               CLR  EA
                     699     ;             MOV  SaveSP, SP
0030 858100   F      700               MOV  SaveSP, SP
                     701     ;     #pragma ENDASM
                     702     ; 
                     703     ;     EA = 0;
                     704                             ; SOURCE LINE # 178
0033 C2AF            705             CLR     EA
                     706     ; 
                     707     ;     OSTCBCur->OSTCBStkPtr = C_XBP;
                     708                             ; SOURCE LINE # 180
0035 AA00     F      709             MOV     R2,C_XBP
0037 A900     F      710             MOV     R1,C_XBP+01H
0039 7B01            711             MOV     R3,#01H
003B EB              712             MOV     A,R3
003C C0E0            713             PUSH    ACC
003E EA              714             MOV     A,R2
003F C0E0            715             PUSH    ACC
0041 E9              716             MOV     A,R1
0042 C0E0            717             PUSH    ACC
0044 900000   F      718             MOV     DPTR,#OSTCBCur
0047 120000   F      719             LCALL   ?C?PLDXDATA
004A 120000   F      720             LCALL   ?C?PSTPTR
                     721     ;   }
                     722                             ; SOURCE LINE # 181
004D                 723     ?C0005:
                     724     ; 
                     725     ;   /* Must be called during tick isr */
                     726     ;   OSTimeTick();
                     727                             ; SOURCE LINE # 184
004D 120000   F      728             LCALL   _?OSTimeTick
                     729     ;   
                     730     ;   /* Must be called finally at every hardware interupt exit point */     
                     731     ;   OSIntExit();
                     732                             ; SOURCE LINE # 187
0050 120000   F      733             LCALL   _?OSIntExit
                     734     ; 
                     735     ;   if(OSIntNesting==0)
                     736                             ; SOURCE LINE # 189
0053 900000   F      737             MOV     DPTR,#OSIntNesting
0056 E0              738             MOVX    A,@DPTR
0057 7017            739             JNZ     ?C0007
                     740     ;   {
                     741                             ; SOURCE LINE # 190
                     742     ;     EA = 0;
                     743                             ; SOURCE LINE # 191
0059 C2AF            744             CLR     EA
                     745     ; 
                     746     ;     C_XBP =OSTCBCur->OSTCBStkPtr;
                     747                             ; SOURCE LINE # 193
005B 900000   F      748             MOV     DPTR,#OSTCBCur
005E 120000   F      749             LCALL   ?C?PLDXDATA
0061 120000   F      750             LCALL   ?C?PLDPTR
0064 CF              751             XCH     A,R7
0065 E9              752             MOV     A,R1
0066 CF              753             XCH     A,R7
0067 8A00     F      754             MOV     C_XBP,R2
0069 8F00     F      755             MOV     C_XBP+01H,R7
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    13

                     756     ; 
                     757     ;     #pragma ASM
                     758     ;             MOV  SP, SaveSP
006B 850081   F      759               MOV  SP, SaveSP
                     760     ;             POP  IE
006E D0A8            761               POP  IE
                     762     ;     #pragma ENDASM
                     763     ;   }
                     764                             ; SOURCE LINE # 199
                     765     ; }
                     766                             ; SOURCE LINE # 200
0070                 767     ?C0007:
0070 D0E0            768             POP     ACC
0072 FF              769             MOV     R7,A
0073 D0E0            770             POP     ACC
0075 FE              771             MOV     R6,A
0076 D0E0            772             POP     ACC
0078 FD              773             MOV     R5,A
0079 D0E0            774             POP     ACC
007B FC              775             MOV     R4,A
007C D0E0            776             POP     ACC
007E FB              777             MOV     R3,A
007F D0E0            778             POP     ACC
0081 FA              779             MOV     R2,A
0082 D0E0            780             POP     ACC
0084 F9              781             MOV     R1,A
0085 D0E0            782             POP     ACC
0087 F8              783             MOV     R0,A
0088 D0D0            784             POP     PSW
008A D082            785             POP     DPL
008C D083            786             POP     DPH
008E D0F0            787             POP     B
0090 D0E0            788             POP     ACC
0092 32              789             RETI    
                     790     ; END OF OSTickISR
                     791     
                     792     ; 
                     793     ; /****************************************************************************************
                             ******************
                     794     ; * SetupComms(void)
                     795     ; * 
                     796     ; *****************************************************************************************
                             *****************/
                     797     ; void initSystem(void) KCREENTRANT
                     798     
----                 799             RSEG  ?PR?_?initSystem?OS_CPU_C
0000                 800     _?initSystem:
                     801                             ; SOURCE LINE # 206
                     802     ; {
                     803     ;   /* Setup Timer */
                     804     ;       TMOD = (TMOD & 0xF0) | 0x21;
                     805                             ; SOURCE LINE # 209
0000 E589            806             MOV     A,TMOD
0002 54F0            807             ANL     A,#0F0H
0004 4421            808             ORL     A,#021H
0006 F589            809             MOV     TMOD,A
                     810     ;   
                     811     ;   /* Freq=25Hz (Ticks per second) */
                     812     ;       TL0  = 0xF0;    
                     813                             ; SOURCE LINE # 212
0008 758AF0          814             MOV     TL0,#0F0H
                     815     ;       TH0  = 0xF0;
                     816                             ; SOURCE LINE # 213
000B 758CF0          817             MOV     TH0,#0F0H
                     818     ;       TR0  = 1;
                     819                             ; SOURCE LINE # 214
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    14

000E D28C            820             SETB    TR0
                     821     ;       ET0  = 1;
                     822                             ; SOURCE LINE # 215
0010 D2A9            823             SETB    ET0
                     824     ;       EA   = 1;
                     825                             ; SOURCE LINE # 216
0012 D2AF            826             SETB    EA
                     827     ; }
                     828                             ; SOURCE LINE # 217
0014 22              829             RET     
                     830     ; END OF _?initSystem
                     831     
                     832     ; 
                     833     ; /****************************************************************************************
                             ******************
                     834     ; * SetupComms(void)
                     835     ; * 
                     836     ; *****************************************************************************************
                             *****************/
                     837     ; void SetupComms(void) KCREENTRANT
                     838     
----                 839             RSEG  ?PR?_?SetupComms?OS_CPU_C
0000                 840     _?SetupComms:
                     841                             ; SOURCE LINE # 223
                     842     ; {
                     843     ;   /* Set for 8,No parity,19200 baud */
                     844     ;   SCON  = 0x50;
                     845                             ; SOURCE LINE # 226
0000 759850          846             MOV     SCON,#050H
                     847     ; 
                     848     ;   /* T1 as baud generator TH1=253=FD=9600  */
                     849     ;   TH1   = 0xFD;
                     850                             ; SOURCE LINE # 229
0003 758DFD          851             MOV     TH1,#0FDH
                     852     ; 
                     853     ;   /* Double the baud rate approx. 19200 */
                     854     ;   PCON |= 0x80;
                     855                             ; SOURCE LINE # 232
0006 438780          856             ORL     PCON,#080H
                     857     ; 
                     858     ;   /* Enable the serial interrupt */ 
                     859     ;   ES    = 1;
                     860                             ; SOURCE LINE # 235
0009 D2AC            861             SETB    ES
                     862     ; 
                     863     ;   /* Start running the timer */     
                     864     ;   TR1   = 1;
                     865                             ; SOURCE LINE # 238
000B D28E            866             SETB    TR1
                     867     ; }
                     868                             ; SOURCE LINE # 239
000D 22              869             RET     
                     870     ; END OF _?SetupComms
                     871     
                     872     ; 
                     873     ; /****************************************************************************************
                             ******************
                     874     ; * void SendChar()
                     875     ; * 
                     876     ; *****************************************************************************************
                             *****************/
                     877     ; void SendChar(unsigned char c) KCREENTRANT
                     878     
----                 879             RSEG  ?PR?_?SendChar?OS_CPU_C
0000                 880     _?SendChar:
                     881             USING   0
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    15

                     882                             ; SOURCE LINE # 245
0000 90FFFF          883             MOV     DPTR,#0FFFFH
0003 120000   F      884             LCALL   ?C?ADDXBP
0006 EF              885             MOV     A,R7
0007 F0              886             MOVX    @DPTR,A
0008 90FFFE          887             MOV     DPTR,#0FFFEH
000B 120000   F      888             LCALL   ?C?ADDXBP
                     889     ; {
                     890     ; //  TI = 1;
                     891     ;   int i;
                     892     ;   SBUF = c;
                     893                             ; SOURCE LINE # 249
000E 850083   F      894             MOV     DPH,?C_XBP
0011 850082   F      895             MOV     DPL,?C_XBP+01H
0014 A3              896             INC     DPTR
0015 A3              897             INC     DPTR
0016 E0              898             MOVX    A,@DPTR
0017 F599            899             MOV     SBUF,A
                     900     ;   for(i = 0; i < 30; i++);
                     901                             ; SOURCE LINE # 250
0019 850083   F      902             MOV     DPH,?C_XBP
001C 850082   F      903             MOV     DPL,?C_XBP+01H
001F E4              904             CLR     A
0020 F0              905             MOVX    @DPTR,A
0021 A3              906             INC     DPTR
0022 F0              907             MOVX    @DPTR,A
0023                 908     ?C0010:
0023 850083   F      909             MOV     DPH,?C_XBP
0026 850082   F      910             MOV     DPL,?C_XBP+01H
0029 E0              911             MOVX    A,@DPTR
002A FE              912             MOV     R6,A
002B A3              913             INC     DPTR
002C E0              914             MOVX    A,@DPTR
002D C3              915             CLR     C
002E 941E            916             SUBB    A,#01EH
0030 EE              917             MOV     A,R6
0031 6480            918             XRL     A,#080H
0033 9480            919             SUBB    A,#080H
0035 500F            920             JNC     ?C0013
0037 850083   F      921             MOV     DPH,?C_XBP
003A 850082   F      922             MOV     DPL,?C_XBP+01H
003D E4              923             CLR     A
003E 75F001          924             MOV     B,#01H
0041 120000   F      925             LCALL   ?C?IILDX
0044 80DD            926             SJMP    ?C0010
                     927     ; }
                     928                             ; SOURCE LINE # 251
0046                 929     ?C0013:
0046 900003          930             MOV     DPTR,#03H
0049 020000   F      931             LJMP    ?C?ADDXBP
                     932     ; END OF _?SendChar
                     933     
                     934     ; /****************************************************************************************
                             ******************
                     935     ; * void SendChar()
                     936     ; * New function to send a string of text 
                     937     ; *
                     938     ; *****************************************************************************************
                             *****************/
                     939     ; void SendString(char *s) KCREENTRANT {
                     940     
----                 941             RSEG  ?PR?_?SendString?OS_CPU_C
0000                 942     _?SendString:
                     943             USING   0
                     944                             ; SOURCE LINE # 257
0000 90FFFD          945             MOV     DPTR,#0FFFDH
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    16

0003 120000   F      946             LCALL   ?C?ADDXBP
0006 120000   F      947             LCALL   ?C?PSTXDATA
0009 90FFFF          948             MOV     DPTR,#0FFFFH
000C 120000   F      949             LCALL   ?C?ADDXBP
000F                 950     ?C0014:
                     951     ; 
                     952     ; INT8U i;
                     953     ;    while(*s != '\0') {
                     954                             ; SOURCE LINE # 260
000F 850083   F      955             MOV     DPH,?C_XBP
0012 850082   F      956             MOV     DPL,?C_XBP+01H
0015 A3              957             INC     DPTR
0016 120000   F      958             LCALL   ?C?PLDXDATA
0019 120000   F      959             LCALL   ?C?CLDPTR
001C 602E            960             JZ      ?C0019
                     961     ;       SendChar(*s++);
                     962                             ; SOURCE LINE # 261
001E 850083   F      963             MOV     DPH,?C_XBP
0021 850082   F      964             MOV     DPL,?C_XBP+01H
0024 A3              965             INC     DPTR
0025 E4              966             CLR     A
0026 75F001          967             MOV     B,#01H
0029 120000   F      968             LCALL   ?C?PLDIXDATA
002C 120000   F      969             LCALL   ?C?CLDPTR
002F FF              970             MOV     R7,A
0030 120000   F      971             LCALL   _?SendChar
                     972     ;       for(i = 0; i < 30; i++);
                     973                             ; SOURCE LINE # 262
0033 850083   F      974             MOV     DPH,?C_XBP
0036 850082   F      975             MOV     DPL,?C_XBP+01H
0039 E4              976             CLR     A
003A F0              977             MOVX    @DPTR,A
003B                 978     ?C0016:
003B 850083   F      979             MOV     DPH,?C_XBP
003E 850082   F      980             MOV     DPL,?C_XBP+01H
0041 E0              981             MOVX    A,@DPTR
0042 C3              982             CLR     C
0043 941E            983             SUBB    A,#01EH
0045 50C8            984             JNC     ?C0014
0047 E0              985             MOVX    A,@DPTR
0048 04              986             INC     A
0049 F0              987             MOVX    @DPTR,A
004A 80EF            988             SJMP    ?C0016
                     989     ;       }
                     990                             ; SOURCE LINE # 263
                     991     ; }
                     992                             ; SOURCE LINE # 264
004C                 993     ?C0019:
004C 900004          994             MOV     DPTR,#04H
004F 020000   F      995             LJMP    ?C?ADDXBP
                     996     ; END OF _?SendString
                     997     
----                 998     CSEG    AT      00023H
0023 020000   F      999             LJMP    Serial_ISR
                    1000     
                    1001     ; 
                    1002     ; /****************************************************************************************
                             ******************
                    1003     ; * void Serial_ISR(void)
                    1004     ; * Sample user ISR: Serial communication
                    1005     ; *****************************************************************************************
                             *****************/
                    1006     ; void Serial_ISR(void) interrupt 4
                    1007     
----                1008             RSEG  ?PR?Serial_ISR?OS_CPU_C
                    1009             USING   0
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    17

0000                1010     Serial_ISR:
0000 C0E0           1011             PUSH    ACC
0002 C0F0           1012             PUSH    B
0004 C083           1013             PUSH    DPH
0006 C082           1014             PUSH    DPL
0008 C0D0           1015             PUSH    PSW
000A E8             1016             MOV     A,R0
000B C0E0           1017             PUSH    ACC
000D E9             1018             MOV     A,R1
000E C0E0           1019             PUSH    ACC
0010 EA             1020             MOV     A,R2
0011 C0E0           1021             PUSH    ACC
0013 EB             1022             MOV     A,R3
0014 C0E0           1023             PUSH    ACC
0016 EC             1024             MOV     A,R4
0017 C0E0           1025             PUSH    ACC
0019 ED             1026             MOV     A,R5
001A C0E0           1027             PUSH    ACC
001C EE             1028             MOV     A,R6
001D C0E0           1029             PUSH    ACC
001F EF             1030             MOV     A,R7
0020 C0E0           1031             PUSH    ACC
                    1032             USING   0
                    1033                             ; SOURCE LINE # 270
                    1034     ; {
                    1035     ;   /* Do this first */
                    1036     ;   /* Must be called first at every hardware interrupt entry point */
                    1037     ;   OSIntEnter();
                    1038                             ; SOURCE LINE # 274
0022 120000   F     1039             LCALL   _?OSIntEnter
                    1040     ; 
                    1041     ;   /* Only at the outerest interrupt we do these. */
                    1042     ;   if(OSIntNesting == 1)
                    1043                             ; SOURCE LINE # 277
0025 900000   F     1044             MOV     DPTR,#OSIntNesting
0028 E0             1045             MOVX    A,@DPTR
0029 B40121         1046             CJNE    A,#01H,?C0020
                    1047     ;   {
                    1048                             ; SOURCE LINE # 278
                    1049     ;     #pragma ASM
                    1050     ;             PUSH IE
002C C0A8           1051               PUSH IE
                    1052     ;             CLR  EA
002E C2AF           1053               CLR  EA
                    1054     ;             MOV  SaveSP, SP
0030 858100   F     1055               MOV  SaveSP, SP
                    1056     ;     #pragma ENDASM
                    1057     ; 
                    1058     ;     EA = 0;
                    1059                             ; SOURCE LINE # 285
0033 C2AF           1060             CLR     EA
                    1061     ; 
                    1062     ;     OSTCBCur->OSTCBStkPtr = C_XBP;  
                    1063                             ; SOURCE LINE # 287
0035 AA00     F     1064             MOV     R2,C_XBP
0037 A900     F     1065             MOV     R1,C_XBP+01H
0039 7B01           1066             MOV     R3,#01H
003B EB             1067             MOV     A,R3
003C C0E0           1068             PUSH    ACC
003E EA             1069             MOV     A,R2
003F C0E0           1070             PUSH    ACC
0041 E9             1071             MOV     A,R1
0042 C0E0           1072             PUSH    ACC
0044 900000   F     1073             MOV     DPTR,#OSTCBCur
0047 120000   F     1074             LCALL   ?C?PLDXDATA
004A 120000   F     1075             LCALL   ?C?PSTPTR
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    18

                    1076     ;   }
                    1077                             ; SOURCE LINE # 288
004D                1078     ?C0020:
                    1079     ; 
                    1080     ; 
                    1081     ;   /* Deal with the type of Serial Interrupt */
                    1082     ;   if(TI)
                    1083                             ; SOURCE LINE # 292
004D 309904         1084             JNB     TI,?C0021
                    1085     ;   {
                    1086                             ; SOURCE LINE # 293
                    1087     ;     TI = 0;
                    1088                             ; SOURCE LINE # 294
0050 C299           1089             CLR     TI
                    1090     ;   }
                    1091                             ; SOURCE LINE # 295
0052 8008           1092             SJMP    ?C0022
0054                1093     ?C0021:
                    1094     ;   else if(RI)
                    1095                             ; SOURCE LINE # 296
0054 309805         1096             JNB     RI,?C0022
                    1097     ;   {
                    1098                             ; SOURCE LINE # 297
                    1099     ;     RI = 0;
                    1100                             ; SOURCE LINE # 298
0057 C298           1101             CLR     RI
                    1102     ;     RxBuffer = SBUF;
                    1103                             ; SOURCE LINE # 299
0059 859900   F     1104             MOV     RxBuffer,SBUF
                    1105     ;   }
                    1106                             ; SOURCE LINE # 300
005C                1107     ?C0022:
                    1108     ; 
                    1109     ; 
                    1110     ;   /* Finally, before exit from ISR, must do as following. */
                    1111     ;   /* Must be called finally at every hardware interupt exit point */
                    1112     ;   OSIntExit();
                    1113                             ; SOURCE LINE # 305
005C 120000   F     1114             LCALL   _?OSIntExit
                    1115     ;   
                    1116     ;   if(OSIntNesting == 0)
                    1117                             ; SOURCE LINE # 307
005F 900000   F     1118             MOV     DPTR,#OSIntNesting
0062 E0             1119             MOVX    A,@DPTR
0063 7017           1120             JNZ     ?C0025
                    1121     ;   {
                    1122                             ; SOURCE LINE # 308
                    1123     ;     EA = 0;
                    1124                             ; SOURCE LINE # 309
0065 C2AF           1125             CLR     EA
                    1126     ; 
                    1127     ;     C_XBP = OSTCBCur->OSTCBStkPtr;
                    1128                             ; SOURCE LINE # 311
0067 900000   F     1129             MOV     DPTR,#OSTCBCur
006A 120000   F     1130             LCALL   ?C?PLDXDATA
006D 120000   F     1131             LCALL   ?C?PLDPTR
0070 CF             1132             XCH     A,R7
0071 E9             1133             MOV     A,R1
0072 CF             1134             XCH     A,R7
0073 8A00     F     1135             MOV     C_XBP,R2
0075 8F00     F     1136             MOV     C_XBP+01H,R7
                    1137     ; 
                    1138     ;     #pragma ASM
                    1139     ;             MOV  SP, SaveSP
0077 850081   F     1140               MOV  SP, SaveSP
                    1141     ;             POP  IE
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    19

007A D0A8           1142               POP  IE
                    1143     ;     #pragma ENDASM
                    1144     ; 
                    1145     ;   }
                    1146                             ; SOURCE LINE # 318
                    1147     ; }
                    1148                             ; SOURCE LINE # 319
007C                1149     ?C0025:
007C D0E0           1150             POP     ACC
007E FF             1151             MOV     R7,A
007F D0E0           1152             POP     ACC
0081 FE             1153             MOV     R6,A
0082 D0E0           1154             POP     ACC
0084 FD             1155             MOV     R5,A
0085 D0E0           1156             POP     ACC
0087 FC             1157             MOV     R4,A
0088 D0E0           1158             POP     ACC
008A FB             1159             MOV     R3,A
008B D0E0           1160             POP     ACC
008D FA             1161             MOV     R2,A
008E D0E0           1162             POP     ACC
0090 F9             1163             MOV     R1,A
0091 D0E0           1164             POP     ACC
0093 F8             1165             MOV     R0,A
0094 D0D0           1166             POP     PSW
0096 D082           1167             POP     DPL
0098 D083           1168             POP     DPH
009A D0F0           1169             POP     B
009C D0E0           1170             POP     ACC
009E 32             1171             RETI    
                    1172     ; END OF Serial_ISR
                    1173     
                    1174     ; 
                    1175     ; 
                    1176     ; /*$PAGE*/
                    1177     ; #if OS_CPU_HOOKS_EN
                    1178     ; /*
                    1179     ; *****************************************************************************************
                             ****************
                    1180     ; *                                       OS INITIALIZATION HOOK
                    1181     ; *                                            (BEGINNING)
                    1182     ; *
                    1183     ; * Description: This function is called by OSInit() at the beginning of OSInit().
                    1184     ; *
                    1185     ; * Arguments  : none
                    1186     ; *
                    1187     ; * Note(s)    : 1) Interrupts should be disabled during this call.
                    1188     ; *****************************************************************************************
                             ****************
                    1189     ; */
                    1190     ; #if OS_VERSION > 203
                    1191     ; void OSInitHookBegin (void) KCREENTRANT
                    1192     
----                1193             RSEG  ?PR?_?OSInitHookBegin?OS_CPU_C
0000                1194     _?OSInitHookBegin:
                    1195                             ; SOURCE LINE # 337
                    1196     ; {
                    1197     ; }
                    1198                             ; SOURCE LINE # 339
0000 22             1199             RET     
                    1200     ; END OF _?OSInitHookBegin
                    1201     
                    1202     ; #endif
                    1203     ; 
                    1204     ; /*
                    1205     ; *****************************************************************************************
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    20

                             ****************
                    1206     ; *                                       OS INITIALIZATION HOOK
                    1207     ; *                                               (END)
                    1208     ; *
                    1209     ; * Description: This function is called by OSInit() at the end of OSInit().
                    1210     ; *
                    1211     ; * Arguments  : none
                    1212     ; *
                    1213     ; * Note(s)    : 1) Interrupts should be disabled during this call.
                    1214     ; *****************************************************************************************
                             ****************
                    1215     ; */
                    1216     ; #if OS_VERSION > 203
                    1217     ; void OSInitHookEnd (void) KCREENTRANT
                    1218     
----                1219             RSEG  ?PR?_?OSInitHookEnd?OS_CPU_C
0000                1220     _?OSInitHookEnd:
                    1221                             ; SOURCE LINE # 355
                    1222     ; {
                    1223     ; }
                    1224                             ; SOURCE LINE # 357
0000 22             1225             RET     
                    1226     ; END OF _?OSInitHookEnd
                    1227     
                    1228     ; #endif
                    1229     ; 
                    1230     ; 
                    1231     ; /*
                    1232     ; *****************************************************************************************
                             ****************
                    1233     ; *                                          TASK CREATION HOOK
                    1234     ; *
                    1235     ; * Description: This function is called when a task is created.
                    1236     ; *
                    1237     ; * Arguments  : ptcb   is a pointer to the task control block of the task being created.
                    1238     ; *
                    1239     ; * Note(s)    : 1) Interrupts are disabled during this call.
                    1240     ; *****************************************************************************************
                             ****************
                    1241     ; */
                    1242     ; void OSTaskCreateHook (OS_TCB *ptcb) KCREENTRANT
                    1243     
----                1244             RSEG  ?PR?_?OSTaskCreateHook?OS_CPU_C
0000                1245     _?OSTaskCreateHook:
                    1246             USING   0
                    1247                             ; SOURCE LINE # 372
0000 90FFFD         1248             MOV     DPTR,#0FFFDH
0003 120000   F     1249             LCALL   ?C?ADDXBP
0006 120000   F     1250             LCALL   ?C?PSTXDATA
                    1251     ; {
                    1252     ;     ptcb = ptcb;                       /* Prevent compiler warning                       
                                           */
                    1253                             ; SOURCE LINE # 374
0009 850083   F     1254             MOV     DPH,?C_XBP
000C 850082   F     1255             MOV     DPL,?C_XBP+01H
000F 120000   F     1256             LCALL   ?C?PLDXDATA
0012 850083   F     1257             MOV     DPH,?C_XBP
0015 850082   F     1258             MOV     DPL,?C_XBP+01H
0018 120000   F     1259             LCALL   ?C?PSTXDATA
                    1260     ; }
                    1261                             ; SOURCE LINE # 375
001B 900003         1262             MOV     DPTR,#03H
001E 020000   F     1263             LJMP    ?C?ADDXBP
                    1264     ; END OF _?OSTaskCreateHook
                    1265     
                    1266     ; 
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    21

                    1267     ; 
                    1268     ; /*
                    1269     ; *****************************************************************************************
                             ****************
                    1270     ; *                                           TASK DELETION HOOK
                    1271     ; *
                    1272     ; * Description: This function is called when a task is deleted.
                    1273     ; *
                    1274     ; * Arguments  : ptcb   is a pointer to the task control block of the task being deleted.
                    1275     ; *
                    1276     ; * Note(s)    : 1) Interrupts are disabled during this call.
                    1277     ; *****************************************************************************************
                             ****************
                    1278     ; */
                    1279     ; void OSTaskDelHook (OS_TCB *ptcb) KCREENTRANT
                    1280     
----                1281             RSEG  ?PR?_?OSTaskDelHook?OS_CPU_C
0000                1282     _?OSTaskDelHook:
                    1283             USING   0
                    1284                             ; SOURCE LINE # 389
0000 90FFFD         1285             MOV     DPTR,#0FFFDH
0003 120000   F     1286             LCALL   ?C?ADDXBP
0006 120000   F     1287             LCALL   ?C?PSTXDATA
                    1288     ; {
                    1289     ;     ptcb = ptcb;                       /* Prevent compiler warning                       
                                           */
                    1290                             ; SOURCE LINE # 391
0009 850083   F     1291             MOV     DPH,?C_XBP
000C 850082   F     1292             MOV     DPL,?C_XBP+01H
000F 120000   F     1293             LCALL   ?C?PLDXDATA
0012 850083   F     1294             MOV     DPH,?C_XBP
0015 850082   F     1295             MOV     DPL,?C_XBP+01H
0018 120000   F     1296             LCALL   ?C?PSTXDATA
                    1297     ; }
                    1298                             ; SOURCE LINE # 392
001B 900003         1299             MOV     DPTR,#03H
001E 020000   F     1300             LJMP    ?C?ADDXBP
                    1301     ; END OF _?OSTaskDelHook
                    1302     
                    1303     ; 
                    1304     ; /*
                    1305     ; *****************************************************************************************
                             ****************
                    1306     ; *                                           TASK SWITCH HOOK
                    1307     ; *
                    1308     ; * Description: This function is called when a task switch is performed.  This allows you 
                             to perform other
                    1309     ; *              operations during a context switch.
                    1310     ; *
                    1311     ; * Arguments  : none
                    1312     ; *
                    1313     ; * Note(s)    : 1) Interrupts are disabled during this call.
                    1314     ; *              2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB 
                             of the task that
                    1315     ; *                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' 
                             points to the 
                    1316     ; *                 task being switched out (i.e. the preempted task).
                    1317     ; *****************************************************************************************
                             ****************
                    1318     ; */
                    1319     ; void OSTaskSwHook (void) KCREENTRANT
                    1320     
----                1321             RSEG  ?PR?_?OSTaskSwHook?OS_CPU_C
0000                1322     _?OSTaskSwHook:
                    1323                             ; SOURCE LINE # 409
                    1324     ; {
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    22

                    1325     ; }
                    1326                             ; SOURCE LINE # 411
0000 22             1327             RET     
                    1328     ; END OF _?OSTaskSwHook
                    1329     
                    1330     ; 
                    1331     ; /*
                    1332     ; *****************************************************************************************
                             ****************
                    1333     ; *                                           STATISTIC TASK HOOK
                    1334     ; *
                    1335     ; * Description: This function is called every second by uC/OS-II's statistics task.  This 
                             allows your 
                    1336     ; *              application to add functionality to the statistics task.
                    1337     ; *
                    1338     ; * Arguments  : none
                    1339     ; *****************************************************************************************
                             ****************
                    1340     ; */
                    1341     ; void OSTaskStatHook (void) KCREENTRANT
                    1342     
----                1343             RSEG  ?PR?_?OSTaskStatHook?OS_CPU_C
0000                1344     _?OSTaskStatHook:
                    1345                             ; SOURCE LINE # 423
                    1346     ; {
                    1347     ; }
                    1348                             ; SOURCE LINE # 425
0000 22             1349             RET     
                    1350     ; END OF _?OSTaskStatHook
                    1351     
                    1352     ; 
                    1353     ; /*
                    1354     ; *****************************************************************************************
                             ****************
                    1355     ; *                                           OSTCBInit() HOOK
                    1356     ; *
                    1357     ; * Description: This function is called by OSTCBInit() after setting up most of the TCB.
                    1358     ; *
                    1359     ; * Arguments  : ptcb    is a pointer to the TCB of the task being created.
                    1360     ; *
                    1361     ; * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
                    1362     ; *****************************************************************************************
                             ****************
                    1363     ; */
                    1364     ; #if OS_VERSION > 203
                    1365     ; void OSTCBInitHook (OS_TCB *ptcb) KCREENTRANT
                    1366     
----                1367             RSEG  ?PR?_?OSTCBInitHook?OS_CPU_C
0000                1368     _?OSTCBInitHook:
                    1369             USING   0
                    1370                             ; SOURCE LINE # 439
0000 90FFFD         1371             MOV     DPTR,#0FFFDH
0003 120000   F     1372             LCALL   ?C?ADDXBP
0006 120000   F     1373             LCALL   ?C?PSTXDATA
                    1374     ; {
                    1375     ;     ptcb = ptcb;                                           /* Prevent Compiler warning   
                                           */
                    1376                             ; SOURCE LINE # 441
0009 850083   F     1377             MOV     DPH,?C_XBP
000C 850082   F     1378             MOV     DPL,?C_XBP+01H
000F 120000   F     1379             LCALL   ?C?PLDXDATA
0012 850083   F     1380             MOV     DPH,?C_XBP
0015 850082   F     1381             MOV     DPL,?C_XBP+01H
0018 120000   F     1382             LCALL   ?C?PSTXDATA
                    1383     ; }
                    1384                             ; SOURCE LINE # 442
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    23

001B 900003         1385             MOV     DPTR,#03H
001E 020000   F     1386             LJMP    ?C?ADDXBP
                    1387     ; END OF _?OSTCBInitHook
                    1388     
                    1389     ; #endif
                    1390     ; 
                    1391     ; 
                    1392     ; /*
                    1393     ; *****************************************************************************************
                             ****************
                    1394     ; *                                               TICK HOOK
                    1395     ; *
                    1396     ; * Description: This function is called every tick.
                    1397     ; *
                    1398     ; * Arguments  : none
                    1399     ; *
                    1400     ; * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
                    1401     ; *****************************************************************************************
                             ****************
                    1402     ; */
                    1403     ; void OSTimeTickHook (void) KCREENTRANT
                    1404     
----                1405             RSEG  ?PR?_?OSTimeTickHook?OS_CPU_C
0000                1406     _?OSTimeTickHook:
                    1407                             ; SOURCE LINE # 457
                    1408     ; {
                    1409     ; }
                    1410                             ; SOURCE LINE # 459
0000 22             1411             RET     
                    1412     ; END OF _?OSTimeTickHook
                    1413     
                    1414     ; 
                    1415     ; 
                    1416     ; /*
                    1417     ; *****************************************************************************************
                             ****************
                    1418     ; *                                             IDLE TASK HOOK
                    1419     ; *
                    1420     ; * Description: This function is called by the idle task.  This hook has been added to all
                             ow you to do  
                    1421     ; *              such things as STOP the CPU to conserve power.
                    1422     ; *
                    1423     ; * Arguments  : none
                    1424     ; *
                    1425     ; * Note(s)    : 1) Interrupts are enabled during this call.
                    1426     ; *****************************************************************************************
                             ****************
                    1427     ; */
                    1428     ; #if OS_VERSION >= 251
                    1429     ; void OSTaskIdleHook (void) KCREENTRANT
                    1430     
----                1431             RSEG  ?PR?_?OSTaskIdleHook?OS_CPU_C
0000                1432     _?OSTaskIdleHook:
                    1433                             ; SOURCE LINE # 475
                    1434     ; {
                    1435     ; }
                    1436                             ; SOURCE LINE # 477
0000 22             1437             RET     
                    1438     ; END OF _?OSTaskIdleHook
                    1439     
                    1440             END
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    24

SYMBOL TABLE LISTING
------ ----- -------


N A M E                          T Y P E  V A L U E   ATTRIBUTES

?C0001. . . . . . . . . . . . .  C ADDR   01CFH   R   SEG=?PR?_?OSTASKSTKINIT?OS_CPU_C
?C0005. . . . . . . . . . . . .  C ADDR   004DH   R   SEG=?PR?OSTICKISR?OS_CPU_C
?C0007. . . . . . . . . . . . .  C ADDR   0070H   R   SEG=?PR?OSTICKISR?OS_CPU_C
?C0010. . . . . . . . . . . . .  C ADDR   0023H   R   SEG=?PR?_?SENDCHAR?OS_CPU_C
?C0013. . . . . . . . . . . . .  C ADDR   0046H   R   SEG=?PR?_?SENDCHAR?OS_CPU_C
?C0014. . . . . . . . . . . . .  C ADDR   000FH   R   SEG=?PR?_?SENDSTRING?OS_CPU_C
?C0016. . . . . . . . . . . . .  C ADDR   003BH   R   SEG=?PR?_?SENDSTRING?OS_CPU_C
?C0019. . . . . . . . . . . . .  C ADDR   004CH   R   SEG=?PR?_?SENDSTRING?OS_CPU_C
?C0020. . . . . . . . . . . . .  C ADDR   004DH   R   SEG=?PR?SERIAL_ISR?OS_CPU_C
?C0021. . . . . . . . . . . . .  C ADDR   0054H   R   SEG=?PR?SERIAL_ISR?OS_CPU_C
?C0022. . . . . . . . . . . . .  C ADDR   005CH   R   SEG=?PR?SERIAL_ISR?OS_CPU_C
?C0025. . . . . . . . . . . . .  C ADDR   007CH   R   SEG=?PR?SERIAL_ISR?OS_CPU_C
?C?ADDXBP . . . . . . . . . . .  C ADDR   -----       EXT
?C?CLDPTR . . . . . . . . . . .  C ADDR   -----       EXT
?C?CSTPTR . . . . . . . . . . .  C ADDR   -----       EXT
?C?IILDX. . . . . . . . . . . .  C ADDR   -----       EXT
?C?ISTPTR . . . . . . . . . . .  C ADDR   -----       EXT
?C?PILDXDATA. . . . . . . . . .  C ADDR   -----       EXT
?C?PLDIXDATA. . . . . . . . . .  C ADDR   -----       EXT
?C?PLDPTR . . . . . . . . . . .  C ADDR   -----       EXT
?C?PLDXDATA . . . . . . . . . .  C ADDR   -----       EXT
?C?PSTPTR . . . . . . . . . . .  C ADDR   -----       EXT
?C?PSTXDATA . . . . . . . . . .  C ADDR   -----       EXT
?C?XBPOFF . . . . . . . . . . .  C ADDR   -----       EXT
?C_INITSEG. . . . . . . . . . .  C SEG    0003H       REL=UNIT
?C_XBP. . . . . . . . . . . . .  D ADDR   -----       EXT
?DT?OS_CPU_C. . . . . . . . . .  D SEG    0002H       REL=UNIT
?PR?OSTICKISR?OS_CPU_C. . . . .  C SEG    0093H       REL=UNIT
?PR?SERIAL_ISR?OS_CPU_C . . . .  C SEG    009FH       REL=UNIT
?PR?_?C_OSCTXSW?OS_CPU_C. . . .  C SEG    003CH       REL=UNIT
?PR?_?INITSYSTEM?OS_CPU_C . . .  C SEG    0015H       REL=UNIT
?PR?_?OSINITHOOKBEGIN?OS_CPU_C.  C SEG    0001H       REL=UNIT
?PR?_?OSINITHOOKEND?OS_CPU_C. .  C SEG    0001H       REL=UNIT
?PR?_?OSINTCTXSW?OS_CPU_C . . .  C SEG    001FH       REL=UNIT
?PR?_?OSSTARTHIGHRDY?OS_CPU_C .  C SEG    001CH       REL=UNIT
?PR?_?OSTASKCREATEHOOK?OS_CPU_C  C SEG    0021H       REL=UNIT
?PR?_?OSTASKDELHOOK?OS_CPU_C. .  C SEG    0021H       REL=UNIT
?PR?_?OSTASKIDLEHOOK?OS_CPU_C .  C SEG    0001H       REL=UNIT
?PR?_?OSTASKSTATHOOK?OS_CPU_C .  C SEG    0001H       REL=UNIT
?PR?_?OSTASKSTKINIT?OS_CPU_C. .  C SEG    01D5H       REL=UNIT
?PR?_?OSTASKSWHOOK?OS_CPU_C . .  C SEG    0001H       REL=UNIT
?PR?_?OSTCBINITHOOK?OS_CPU_C. .  C SEG    0021H       REL=UNIT
?PR?_?OSTIMETICKHOOK?OS_CPU_C .  C SEG    0001H       REL=UNIT
?PR?_?SENDCHAR?OS_CPU_C . . . .  C SEG    004CH       REL=UNIT
?PR?_?SENDSTRING?OS_CPU_C . . .  C SEG    0052H       REL=UNIT
?PR?_?SETUPCOMMS?OS_CPU_C . . .  C SEG    000EH       REL=UNIT
AC. . . . . . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . . . . . . .  D ADDR   00E0H   A   
B . . . . . . . . . . . . . . .  D ADDR   00F0H   A   
CP_RL2. . . . . . . . . . . . .  B ADDR   00C8H.0 A   
CY. . . . . . . . . . . . . . .  B ADDR   00D0H.7 A   
C_T2. . . . . . . . . . . . . .  B ADDR   00C8H.1 A   
C_XBP . . . . . . . . . . . . .  D ADDR   -----       EXT
DPH . . . . . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . . . . . .  D ADDR   0082H   A   
EA. . . . . . . . . . . . . . .  B ADDR   00A8H.7 A   
ES. . . . . . . . . . . . . . .  B ADDR   00A8H.4 A   
ET0 . . . . . . . . . . . . . .  B ADDR   00A8H.1 A   
ET1 . . . . . . . . . . . . . .  B ADDR   00A8H.3 A   
ET2 . . . . . . . . . . . . . .  B ADDR   00A8H.5 A   
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    25

EX0 . . . . . . . . . . . . . .  B ADDR   00A8H.0 A   
EX1 . . . . . . . . . . . . . .  B ADDR   00A8H.2 A   
EXEN2 . . . . . . . . . . . . .  B ADDR   00C8H.3 A   
EXF2. . . . . . . . . . . . . .  B ADDR   00C8H.6 A   
F0. . . . . . . . . . . . . . .  B ADDR   00D0H.5 A   
IE. . . . . . . . . . . . . . .  D ADDR   00A8H   A   
IE0 . . . . . . . . . . . . . .  B ADDR   0088H.1 A   
IE1 . . . . . . . . . . . . . .  B ADDR   0088H.3 A   
INT0. . . . . . . . . . . . . .  B ADDR   00B0H.2 A   
INT1. . . . . . . . . . . . . .  B ADDR   00B0H.3 A   
IP. . . . . . . . . . . . . . .  D ADDR   00B8H   A   
IT0 . . . . . . . . . . . . . .  B ADDR   0088H.0 A   
IT1 . . . . . . . . . . . . . .  B ADDR   0088H.2 A   
OSINTNESTING. . . . . . . . . .  X ADDR   -----       EXT
OSPRIOCUR . . . . . . . . . . .  X ADDR   -----       EXT
OSPRIOHIGHRDY . . . . . . . . .  X ADDR   -----       EXT
OSRUNNING . . . . . . . . . . .  X ADDR   -----       EXT
OSTCBCUR. . . . . . . . . . . .  X ADDR   -----       EXT
OSTCBHIGHRDY. . . . . . . . . .  X ADDR   -----       EXT
OSTICKISR . . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?OSTICKISR?OS_CPU_C
OS_CPU_C. . . . . . . . . . . .  N NUMB   -----       
OV. . . . . . . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . . . . . . .  D ADDR   0080H   A   
P1. . . . . . . . . . . . . . .  D ADDR   0090H   A   
P2. . . . . . . . . . . . . . .  D ADDR   00A0H   A   
P3. . . . . . . . . . . . . . .  D ADDR   00B0H   A   
PCON. . . . . . . . . . . . . .  D ADDR   0087H   A   
PS. . . . . . . . . . . . . . .  B ADDR   00B8H.4 A   
PSW . . . . . . . . . . . . . .  D ADDR   00D0H   A   
PT0 . . . . . . . . . . . . . .  B ADDR   00B8H.1 A   
PT1 . . . . . . . . . . . . . .  B ADDR   00B8H.3 A   
PT2 . . . . . . . . . . . . . .  B ADDR   00B8H.5 A   
PX0 . . . . . . . . . . . . . .  B ADDR   00B8H.0 A   
PX1 . . . . . . . . . . . . . .  B ADDR   00B8H.2 A   
RB8 . . . . . . . . . . . . . .  B ADDR   0098H.2 A   
RCAP2H. . . . . . . . . . . . .  D ADDR   00CBH   A   
RCAP2L. . . . . . . . . . . . .  D ADDR   00CAH   A   
RCLK. . . . . . . . . . . . . .  B ADDR   00C8H.5 A   
RD. . . . . . . . . . . . . . .  B ADDR   00B0H.7 A   
REN . . . . . . . . . . . . . .  B ADDR   0098H.4 A   
RI. . . . . . . . . . . . . . .  B ADDR   0098H.0 A   
RS0 . . . . . . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . . . . . . .  B ADDR   00D0H.4 A   
RXBUFFER. . . . . . . . . . . .  D ADDR   0000H   R   SEG=?DT?OS_CPU_C
RXD . . . . . . . . . . . . . .  B ADDR   00B0H.0 A   
SAVESP. . . . . . . . . . . . .  D ADDR   0001H   R   SEG=?DT?OS_CPU_C
SBUF. . . . . . . . . . . . . .  D ADDR   0099H   A   
SCON. . . . . . . . . . . . . .  D ADDR   0098H   A   
SERIAL_ISR. . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?SERIAL_ISR?OS_CPU_C
SM0 . . . . . . . . . . . . . .  B ADDR   0098H.7 A   
SM1 . . . . . . . . . . . . . .  B ADDR   0098H.6 A   
SM2 . . . . . . . . . . . . . .  B ADDR   0098H.5 A   
SP. . . . . . . . . . . . . . .  D ADDR   0081H   A   
STACK . . . . . . . . . . . . .  I ADDR   -----       EXT
T0. . . . . . . . . . . . . . .  B ADDR   00B0H.4 A   
T1. . . . . . . . . . . . . . .  B ADDR   00B0H.5 A   
T2. . . . . . . . . . . . . . .  B ADDR   0090H.0 A   
T2CON . . . . . . . . . . . . .  D ADDR   00C8H   A   
T2EX. . . . . . . . . . . . . .  B ADDR   0090H.1 A   
TB8 . . . . . . . . . . . . . .  B ADDR   0098H.3 A   
TCLK. . . . . . . . . . . . . .  B ADDR   00C8H.4 A   
TCON. . . . . . . . . . . . . .  D ADDR   0088H   A   
TF0 . . . . . . . . . . . . . .  B ADDR   0088H.5 A   
TF1 . . . . . . . . . . . . . .  B ADDR   0088H.7 A   
TF2 . . . . . . . . . . . . . .  B ADDR   00C8H.7 A   
A51 MACRO ASSEMBLER  OS_CPU_C                                                             02/17/2017 11:57:45 PAGE    26

TH0 . . . . . . . . . . . . . .  D ADDR   008CH   A   
TH1 . . . . . . . . . . . . . .  D ADDR   008DH   A   
TH2 . . . . . . . . . . . . . .  D ADDR   00CDH   A   
TI. . . . . . . . . . . . . . .  B ADDR   0098H.1 A   
TL0 . . . . . . . . . . . . . .  D ADDR   008AH   A   
TL1 . . . . . . . . . . . . . .  D ADDR   008BH   A   
TL2 . . . . . . . . . . . . . .  D ADDR   00CCH   A   
TMOD. . . . . . . . . . . . . .  D ADDR   0089H   A   
TR0 . . . . . . . . . . . . . .  B ADDR   0088H.4 A   
TR1 . . . . . . . . . . . . . .  B ADDR   0088H.6 A   
TR2 . . . . . . . . . . . . . .  B ADDR   00C8H.2 A   
TXD . . . . . . . . . . . . . .  B ADDR   00B0H.1 A   
WR. . . . . . . . . . . . . . .  B ADDR   00B0H.6 A   
_?C_OSCTXSW . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?C_OSCTXSW?OS_CPU_C
_?INITSYSTEM. . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?INITSYSTEM?OS_CPU_C
_?KCOSCTXSW . . . . . . . . . .  C ADDR   -----       EXT
_?LOADCTX . . . . . . . . . . .  C ADDR   -----       EXT
_?OSINITHOOKBEGIN . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSINITHOOKBEGIN?OS_CPU_C
_?OSINITHOOKEND . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSINITHOOKEND?OS_CPU_C
_?OSINTCTXSW. . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSINTCTXSW?OS_CPU_C
_?OSINTENTER. . . . . . . . . .  C ADDR   -----       EXT
_?OSINTEXIT . . . . . . . . . .  C ADDR   -----       EXT
_?OSSTARTHIGHRDY. . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSSTARTHIGHRDY?OS_CPU_C
_?OSTASKCREATEHOOK. . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSTASKCREATEHOOK?OS_CPU_C
_?OSTASKDELHOOK . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSTASKDELHOOK?OS_CPU_C
_?OSTASKIDLEHOOK. . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSTASKIDLEHOOK?OS_CPU_C
_?OSTASKSTATHOOK. . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSTASKSTATHOOK?OS_CPU_C
_?OSTASKSTKINIT . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSTASKSTKINIT?OS_CPU_C
_?OSTASKSWHOOK. . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSTASKSWHOOK?OS_CPU_C
_?OSTCBINITHOOK . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSTCBINITHOOK?OS_CPU_C
_?OSTIMETICK. . . . . . . . . .  C ADDR   -----       EXT
_?OSTIMETICKHOOK. . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?OSTIMETICKHOOK?OS_CPU_C
_?SENDCHAR. . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?SENDCHAR?OS_CPU_C
_?SENDSTRING. . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?SENDSTRING?OS_CPU_C
_?SETUPCOMMS. . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_?SETUPCOMMS?OS_CPU_C


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
