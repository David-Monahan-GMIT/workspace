C51 COMPILER V9.02   OS_TASK                                                               02/16/2017 12:44:25 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE OS_TASK
OBJECT MODULE PLACED IN .\bin\obj\OS_TASK.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\kernel\OS_TASK.C LARGE WARNINGLEVEL(0) OPTIMIZE(SIZE) REGFILE(.\bin\obj
                    -\kernel.ORC) BROWSE ORDER NOAREGS INCDIR(src\include) DEBUG OBJECTEXTEND NOCOND PRINT(.\bin\lst\OS_TASK.lst) OBJECT(.\bi
                    -n\obj\OS_TASK.obj)

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                                uC/OS-II
   4          *                                          The Real-Time Kernel
   5          *                                            TASK MANAGEMENT
   6          *
   7          *                          (c) Copyright 1992-2001, Jean J. Labrosse, Weston, FL
   8          *                                           All Rights Reserved
   9          *
  10          * File : OS_TASK.C
  11          * By   : Jean J. Labrosse
  12          *********************************************************************************************************
  13          */
  14          
  15          #ifndef  OS_MASTER_FILE
  16          #include "includes.h"
  17          #endif
  18          
  19          /*
  20          *********************************************************************************************************
  21          *                                        CHANGE PRIORITY OF A TASK
  22          *
  23          * Description: This function allows you to change the priority of a task dynamically.  Note that the new
  24          *              priority MUST be available.
  25          *
  26          * Arguments  : oldp     is the old priority
  27          *
  28          *              newp     is the new priority
  29          *
  30          * Returns    : OS_NO_ERR        is the call was successful
  31          *              OS_PRIO_INVALID  if the priority you specify is higher that the maximum allowed
  32          *                               (i.e. >= OS_LOWEST_PRIO)
  33          *              OS_PRIO_EXIST    if the new priority already exist.
  34          *              OS_PRIO_ERR      there is no task with the specified OLD priority (i.e. the OLD task does
  35          *                               not exist.
  36          *********************************************************************************************************
  37          */
  38          
  39          #if OS_TASK_CHANGE_PRIO_EN > 0
  40          INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio) KCREENTRANT
  41          {
  42   1      #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
  45   1      
  46   1      #if OS_EVENT_EN > 0
  47   1          OS_EVENT    *pevent;
  48   1      #endif
  49   1      
  50   1          OS_TCB      *ptcb;
  51   1          INT8U        x;
  52   1          INT8U        y;
  53   1          INT8U        bitx;
  54   1          INT8U        bity;
  55   1      
C51 COMPILER V9.02   OS_TASK                                                               02/16/2017 12:44:25 PAGE 2   

  56   1      
  57   1      
  58   1      #if OS_ARG_CHK_EN > 0
  59   1          if ((oldprio >= OS_LOWEST_PRIO && oldprio != OS_PRIO_SELF)  ||
  60   1               newprio >= OS_LOWEST_PRIO) {
  61   2              return (OS_PRIO_INVALID);
  62   2          }
  63   1      #endif
  64   1          OS_ENTER_CRITICAL();
  65   1          if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {                 /* New priority must not already exist */
  66   2              OS_EXIT_CRITICAL();
  67   2              return (OS_PRIO_EXIST);
  68   2          } else {
  69   2              OSTCBPrioTbl[newprio] = (OS_TCB *)1;                    /* Reserve the entry to prevent others */
  70   2              OS_EXIT_CRITICAL();
  71   2              y    = newprio >> 3;                                    /* Precompute to reduce INT. latency   */
  72   2              bity = OSMapTbl[y];
  73   2              x    = newprio & 0x07;
  74   2              bitx = OSMapTbl[x];
  75   2              OS_ENTER_CRITICAL();
  76   2              if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                */
  77   3                  oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                   */
  78   3              }
  79   2              if ((ptcb = OSTCBPrioTbl[oldprio]) != (OS_TCB *)0) {    /* Task to change must exist           */
  80   3                  OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                /* Remove TCB from old priority        */
  81   3                  if ((OSRdyTbl[ptcb->OSTCBY] & ptcb->OSTCBBitX) != 0x00) {  /* If task is ready make it not */
  82   4                      if ((OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0x00) {
  83   5                          OSRdyGrp &= ~ptcb->OSTCBBitY;
  84   5                      }
  85   4                      OSRdyGrp    |= bity;                            /* Make new priority ready to run      */
  86   4                      OSRdyTbl[y] |= bitx;
  87   4      #if OS_EVENT_EN > 0
  88   4                  } else {
  89   4                      if ((pevent = ptcb->OSTCBEventPtr) != (OS_EVENT *)0) { /* Remove from event wait list  */
  90   5                          if ((pevent->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
  91   6                              pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  92   6                          }
  93   5                          pevent->OSEventGrp    |= bity;              /* Add new priority to wait list       */
  94   5                          pevent->OSEventTbl[y] |= bitx;
  95   5                      }
  96   4      #endif
  97   4                  }
  98   3                  OSTCBPrioTbl[newprio] = ptcb;                       /* Place pointer to TCB @ new priority */
  99   3                  ptcb->OSTCBPrio       = newprio;                    /* Set new task priority               */
 100   3                  ptcb->OSTCBY          = y;
 101   3                  ptcb->OSTCBX          = x;
 102   3                  ptcb->OSTCBBitY       = bity;
 103   3                  ptcb->OSTCBBitX       = bitx;
 104   3                  OS_EXIT_CRITICAL();
 105   3                  OS_Sched();                                         /* Run highest priority task ready     */
 106   3                  return (OS_NO_ERR);
 107   3              } else {
 108   3                  OSTCBPrioTbl[newprio] = (OS_TCB *)0;                /* Release the reserved prio.          */
 109   3                  OS_EXIT_CRITICAL();
 110   3                  return (OS_PRIO_ERR);                               /* Task to change didn't exist         */
 111   3              }
 112   2          }
 113   1      }
 114          #endif
 115          /*$PAGE*/
 116          /*
 117          *********************************************************************************************************
C51 COMPILER V9.02   OS_TASK                                                               02/16/2017 12:44:25 PAGE 3   

 118          *                                            CREATE A TASK
 119          *
 120          * Description: This function is used to have uC/OS-II manage the execution of a task.  Tasks can either
 121          *              be created prior to the start of multitasking or by a running task.  A task cannot be
 122          *              created by an ISR.
 123          *
 124          * Arguments  : task     is a pointer to the task's code
 125          *
 126          *              pdata    is a pointer to an optional data area which can be used to pass parameters to
 127          *                       the task when the task first executes.  Where the task is concerned it thinks
 128          *                       it was invoked and passed the argument 'pdata' as follows:
 129          *
 130          *                           void Task (void *pdata)
 131          *                           {
 132          *                               for (;;) {
 133          *                                   Task code;
 134          *                               }
 135          *                           }
 136          *
 137          *              ptos     is a pointer to the task's top of stack.  If the configuration constant
 138          *                       OS_STK_GROWTH is set to 1, the stack is assumed to grow downward (i.e. from high
 139          *                       memory to low memory).  'pstk' will thus point to the highest (valid) memory
 140          *                       location of the stack.  If OS_STK_GROWTH is set to 0, 'pstk' will point to the
 141          *                       lowest memory location of the stack and the stack will grow with increasing
 142          *                       memory locations.
 143          *
 144          *              prio     is the task's priority.  A unique priority MUST be assigned to each task and the
 145          *                       lower the number, the higher the priority.
 146          *
 147          * Returns    : OS_NO_ERR        if the function was successful.
 148          *              OS_PRIO_EXIT     if the task priority already exist
 149          *                               (each task MUST have a unique priority).
 150          *              OS_PRIO_INVALID  if the priority you specify is higher that the maximum allowed
 151          *                               (i.e. >= OS_LOWEST_PRIO)
 152          *********************************************************************************************************
 153          */
 154          
 155          #if OS_TASK_CREATE_EN > 0
 156          INT8U  OSTaskCreate (void (*task)(void *pd) KCREENTRANT, void *pdata, OS_STK *ptos, INT8U prio) KCREENTRAN
             -T
 157          {
 158   1      #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
 161   1          OS_STK    *psp;
 162   1          INT8U      err;
 163   1      
 164   1      
 165   1      #if OS_ARG_CHK_EN > 0
 166   1          if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 167   2              return (OS_PRIO_INVALID);
 168   2          }
 169   1      #endif
 170   1          OS_ENTER_CRITICAL();
 171   1          if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 172   2              OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing ...  */
 173   2                                                   /* ... the same thing until task is created.              */
 174   2              OS_EXIT_CRITICAL();
 175   2              psp = (OS_STK *)OSTaskStkInit(task, pdata, ptos, 0);    /* Initialize the task's stack         */
 176   2              err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 177   2              if (err == OS_NO_ERR) {
 178   3                  OS_ENTER_CRITICAL();
 179   3                  OSTaskCtr++;                                        /* Increment the #tasks counter        */
 180   3                  OS_EXIT_CRITICAL();
C51 COMPILER V9.02   OS_TASK                                                               02/16/2017 12:44:25 PAGE 4   

 181   3                  if (OSRunning == TRUE) {         /* Find highest priority task if multitasking has started */
 182   4                      OS_Sched();
 183   4                  }
 184   3              } else {
 185   3                  OS_ENTER_CRITICAL();
 186   3                  OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 187   3                  OS_EXIT_CRITICAL();
 188   3              }
 189   2              return (err);
 190   2          }
 191   1          OS_EXIT_CRITICAL();
 192   1          return (OS_PRIO_EXIST);
 193   1      }
 194          #endif
 195          /*$PAGE*/
 196          /*
 197          *********************************************************************************************************
 198          *                                     CREATE A TASK (Extended Version)
 199          *
 200          * Description: This function is used to have uC/OS-II manage the execution of a task.  Tasks can either
 201          *              be created prior to the start of multitasking or by a running task.  A task cannot be
 202          *              created by an ISR.  This function is similar to OSTaskCreate() except that it allows
 203          *              additional information about a task to be specified.
 204          *
 205          * Arguments  : task     is a pointer to the task's code
 206          *
 207          *              pdata    is a pointer to an optional data area which can be used to pass parameters to
 208          *                       the task when the task first executes.  Where the task is concerned it thinks
 209          *                       it was invoked and passed the argument 'pdata' as follows:
 210          *
 211          *                           void Task (void *pdata)
 212          *                           {
 213          *                               for (;;) {
 214          *                                   Task code;
 215          *                               }
 216          *                           }
 217          *
 218          *              ptos     is a pointer to the task's top of stack.  If the configuration constant
 219          *                       OS_STK_GROWTH is set to 1, the stack is assumed to grow downward (i.e. from high
 220          *                       memory to low memory).  'pstk' will thus point to the highest (valid) memory
 221          *                       location of the stack.  If OS_STK_GROWTH is set to 0, 'pstk' will point to the
 222          *                       lowest memory location of the stack and the stack will grow with increasing
 223          *                       memory locations.  'pstk' MUST point to a valid 'free' data item.
 224          *
 225          *              prio     is the task's priority.  A unique priority MUST be assigned to each task and the
 226          *                       lower the number, the higher the priority.
 227          *
 228          *              id       is the task's ID (0..65535)
 229          *
 230          *              pbos     is a pointer to the task's bottom of stack.  If the configuration constant
 231          *                       OS_STK_GROWTH is set to 1, the stack is assumed to grow downward (i.e. from high
 232          *                       memory to low memory).  'pbos' will thus point to the LOWEST (valid) memory
 233          *                       location of the stack.  If OS_STK_GROWTH is set to 0, 'pbos' will point to the
 234          *                       HIGHEST memory location of the stack and the stack will grow with increasing
 235          *                       memory locations.  'pbos' MUST point to a valid 'free' data item.
 236          *
 237          *              stk_size is the size of the stack in number of elements.  If OS_STK is set to INT8U,
 238          *                       'stk_size' corresponds to the number of bytes available.  If OS_STK is set to
 239          *                       INT16U, 'stk_size' contains the number of 16-bit entries available.  Finally, if
 240          *                       OS_STK is set to INT32U, 'stk_size' contains the number of 32-bit entries
 241          *                       available on the stack.
 242          *
C51 COMPILER V9.02   OS_TASK                                                               02/16/2017 12:44:25 PAGE 5   

 243          *              pext     is a pointer to a user supplied memory location which is used as a TCB extension.
 244          *                       For example, this user memory can hold the contents of floating-point registers
 245          *                       during a context switch, the time each task takes to execute, the number of times
 246          *                       the task has been switched-in, etc.
 247          *
 248          *              opt      contains additional information (or options) about the behavior of the task.  The
 249          *                       LOWER 8-bits are reserved by uC/OS-II while the upper 8 bits can be application
 250          *                       specific.  See OS_TASK_OPT_??? in uCOS-II.H.
 251          *
 252          * Returns    : OS_NO_ERR        if the function was successful.
 253          *              OS_PRIO_EXIT     if the task priority already exist
 254          *                               (each task MUST have a unique priority).
 255          *              OS_PRIO_INVALID  if the priority you specify is higher that the maximum allowed
 256          *                               (i.e. > OS_LOWEST_PRIO)
 257          *********************************************************************************************************
 258          */
 259          /*$PAGE*/
 260          #if OS_TASK_CREATE_EXT_EN > 0
 318          /*$PAGE*/
 319          /*
 320          *********************************************************************************************************
 321          *                                            DELETE A TASK
 322          *
 323          * Description: This function allows you to delete a task.  The calling task can delete itself by
 324          *              its own priority number.  The deleted task is returned to the dormant state and can be
 325          *              re-activated by creating the deleted task again.
 326          *
 327          * Arguments  : prio    is the priority of the task to delete.  Note that you can explicitely delete
 328          *                      the current task without knowing its priority level by setting 'prio' to
 329          *                      OS_PRIO_SELF.
 330          *
 331          * Returns    : OS_NO_ERR           if the call is successful
 332          *              OS_TASK_DEL_IDLE    if you attempted to delete uC/OS-II's idle task
 333          *              OS_PRIO_INVALID     if the priority you specify is higher that the maximum allowed
 334          *                                  (i.e. >= OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
 335          *              OS_TASK_DEL_ERR     if the task you want to delete does not exist
 336          *              OS_TASK_DEL_ISR     if you tried to delete a task from an ISR
 337          *
 338          * Notes      : 1) To reduce interrupt latency, OSTaskDel() 'disables' the task:
 339          *                    a) by making it not ready
 340          *                    b) by removing it from any wait lists
 341          *                    c) by preventing OSTimeTick() from making the task ready to run.
 342          *                 The task can then be 'unlinked' from the miscellaneous structures in uC/OS-II.
 343          *              2) The function OS_Dummy() is called after OS_EXIT_CRITICAL() because, on most processors,
 344          *                 the next instruction following the enable interrupt instruction is ignored.  
 345          *              3) An ISR cannot delete a task.
 346          *              4) The lock nesting counter is incremented because, for a brief instant, if the current
 347          *                 task is being deleted, the current task would not be able to be rescheduled because it
 348          *                 is removed from the ready list.  Incrementing the nesting counter prevents another task
 349          *                 from being schedule.  This means that an ISR would return to the current task which is
 350          *                 being deleted.  The rest of the deletion would thus be able to be completed.
 351          *********************************************************************************************************
 352          */
 353          /*$PAGE*/
 354          #if OS_TASK_DEL_EN > 0
 435          /*$PAGE*/
 436          /*
 437          *********************************************************************************************************
 438          *                                    REQUEST THAT A TASK DELETE ITSELF
 439          *
 440          * Description: This function is used to:
 441          *                   a) notify a task to delete itself.
C51 COMPILER V9.02   OS_TASK                                                               02/16/2017 12:44:25 PAGE 6   

 442          *                   b) to see if a task requested that the current task delete itself.
 443          *              This function is a little tricky to understand.  Basically, you have a task that needs
 444          *              to be deleted however, this task has resources that it has allocated (memory buffers,
 445          *              semaphores, mailboxes, queues etc.).  The task cannot be deleted otherwise these
 446          *              resources would not be freed.  The requesting task calls OSTaskDelReq() to indicate that
 447          *              the task needs to be deleted.  Deleting of the task is however, deferred to the task to
 448          *              be deleted.  For example, suppose that task #10 needs to be deleted.  The requesting task
 449          *              example, task #5, would call OSTaskDelReq(10).  When task #10 gets to execute, it calls
 450          *              this function by specifying OS_PRIO_SELF and monitors the returned value.  If the return
 451          *              value is OS_TASK_DEL_REQ, another task requested a task delete.  Task #10 would look like
 452          *              this:
 453          *
 454          *                   void Task(void *data)
 455          *                   {
 456          *                       .
 457          *                       .
 458          *                       while (1) {
 459          *                           OSTimeDly(1);
 460          *                           if (OSTaskDelReq(OS_PRIO_SELF) == OS_TASK_DEL_REQ) {
 461          *                               Release any owned resources;
 462          *                               De-allocate any dynamic memory;
 463          *                               OSTaskDel(OS_PRIO_SELF);
 464          *                           }
 465          *                       }
 466          *                   }
 467          *
 468          * Arguments  : prio    is the priority of the task to request the delete from
 469          *
 470          * Returns    : OS_NO_ERR          if the task exist and the request has been registered
 471          *              OS_TASK_NOT_EXIST  if the task has been deleted.  This allows the caller to know whether
 472          *                                 the request has been executed.
 473          *              OS_TASK_DEL_IDLE   if you requested to delete uC/OS-II's idle task
 474          *              OS_PRIO_INVALID    if the priority you specify is higher that the maximum allowed
 475          *                                 (i.e. >= OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
 476          *              OS_TASK_DEL_REQ    if a task (possibly another task) requested that the running task be
 477          *                                 deleted.
 478          *********************************************************************************************************
 479          */
 480          /*$PAGE*/
 481          #if OS_TASK_DEL_EN > 0
 517          /*$PAGE*/
 518          /*
 519          *********************************************************************************************************
 520          *                                        RESUME A SUSPENDED TASK
 521          *
 522          * Description: This function is called to resume a previously suspended task.  This is the only call that
 523          *              will remove an explicit task suspension.
 524          *
 525          * Arguments  : prio     is the priority of the task to resume.
 526          *
 527          * Returns    : OS_NO_ERR                if the requested task is resumed
 528          *              OS_PRIO_INVALID          if the priority you specify is higher that the maximum allowed
 529          *                                       (i.e. >= OS_LOWEST_PRIO)
 530          *              OS_TASK_RESUME_PRIO      if the task to resume does not exist
 531          *              OS_TASK_NOT_SUSPENDED    if the task to resume has not been suspended
 532          *********************************************************************************************************
 533          */
 534          
 535          #if OS_TASK_SUSPEND_EN > 0
 570          /*$PAGE*/
 571          /*
 572          *********************************************************************************************************
C51 COMPILER V9.02   OS_TASK                                                               02/16/2017 12:44:25 PAGE 7   

 573          *                                             STACK CHECKING
 574          *
 575          * Description: This function is called to check the amount of free memory left on the specified task's
 576          *              stack.
 577          *
 578          * Arguments  : prio     is the task priority
 579          *
 580          *              pdata    is a pointer to a data structure of type OS_STK_DATA.
 581          *
 582          * Returns    : OS_NO_ERR           upon success
 583          *              OS_PRIO_INVALID     if the priority you specify is higher that the maximum allowed
 584          *                                  (i.e. > OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
 585          *              OS_TASK_NOT_EXIST   if the desired task has not been created
 586          *              OS_TASK_OPT_ERR     if you did NOT specified OS_TASK_OPT_STK_CHK when the task was created
 587          *********************************************************************************************************
 588          */
 589          #if OS_TASK_CREATE_EXT_EN > 0
 639          /*$PAGE*/
 640          /*
 641          *********************************************************************************************************
 642          *                                            SUSPEND A TASK
 643          *
 644          * Description: This function is called to suspend a task.  The task can be the calling task if the
 645          *              priority passed to OSTaskSuspend() is the priority of the calling task or OS_PRIO_SELF.
 646          *
 647          * Arguments  : prio     is the priority of the task to suspend.  If you specify OS_PRIO_SELF, the
 648          *                       calling task will suspend itself and rescheduling will occur.
 649          *
 650          * Returns    : OS_NO_ERR                if the requested task is suspended
 651          *              OS_TASK_SUSPEND_IDLE     if you attempted to suspend the idle task which is not allowed.
 652          *              OS_PRIO_INVALID          if the priority you specify is higher that the maximum allowed
 653          *                                       (i.e. >= OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
 654          *              OS_TASK_SUSPEND_PRIO     if the task to suspend does not exist
 655          *
 656          * Note       : You should use this function with great care.  If you suspend a task that is waiting for
 657          *              an event (i.e. a message, a semaphore, a queue ...) you will prevent this task from
 658          *              running when the event arrives.
 659          *********************************************************************************************************
 660          */
 661          
 662          #if OS_TASK_SUSPEND_EN > 0
 704          /*$PAGE*/
 705          /*
 706          *********************************************************************************************************
 707          *                                            QUERY A TASK
 708          *
 709          * Description: This function is called to obtain a copy of the desired task's TCB.
 710          *
 711          * Arguments  : prio     is the priority of the task to obtain information from.
 712          *
 713          * Returns    : OS_NO_ERR       if the requested task is suspended
 714          *              OS_PRIO_INVALID if the priority you specify is higher that the maximum allowed
 715          *                              (i.e. > OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
 716          *              OS_PRIO_ERR     if the desired task has not been created
 717          *********************************************************************************************************
 718          */
 719          
 720          #if OS_TASK_QUERY_EN > 0


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1167    ----
C51 COMPILER V9.02   OS_TASK                                                               02/16/2017 12:44:25 PAGE 8   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
