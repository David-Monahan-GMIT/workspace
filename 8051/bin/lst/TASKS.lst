C51 COMPILER V9.02   TASKS                                                                 02/17/2017 11:57:46 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE TASKS
OBJECT MODULE PLACED IN .\bin\obj\TASKS.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\init\TASKS.C LARGE WARNINGLEVEL(0) OPTIMIZE(SIZE) REGFILE(.\bin\obj\ker
                    -nel.ORC) BROWSE ORDER NOAREGS INCDIR(src\include) DEBUG OBJECTEXTEND NOCOND PRINT(.\bin\lst\TASKS.lst) OBJECT(.\bin\obj\
                    -TASKS.obj)

line level    source

   1          #include "includes.h"
   2          
   3          /* CONSTANTS */    
   4          #define  TASK_STK_SIZE  64
   5          #define  N_TASKS        4
   6          
   7          /* Structures */
   8          typedef struct TASK_PARAM {
   9                  char ID;  // Task id
  10                  INT8U wait;      // timeout/delay       
  11                  OS_EVENT* Sem; // Semaphore to use
  12                  INT8U err;
  13          } taskParam;
  14          
  15          typedef struct TASK_SEMS {
  16                  OS_EVENT* sem1;
  17                  OS_EVENT* sem2;
  18                  OS_EVENT* sem3;
  19          } taskSems;
  20          
  21          /* VARIABLES */
  22          
  23          static INT8U p0, p1, p2;
  24          static INT8U i = 0;
  25          OS_STK InitTaskStk[TASK_STK_SIZE];
  26          OS_STK TaskStk[N_TASKS][TASK_STK_SIZE];
  27          
  28          static taskParam t1, t2, t3;
  29          static taskSems sems;
  30          
  31          
  32          /* FUNCTION PROTOTYPES */
  33          void   InitTask(void *args) KCREENTRANT;
  34          void   Task1(void *args) KCREENTRANT;
  35          void   Task2(void *args) KCREENTRANT;
  36          void   Task3(void *args) KCREENTRANT;
  37          
  38          sbit P1_0  = P1^0;
  39          sbit P1_1  = P1^1;
  40          sbit P1_2  = P1^2;
  41          sbit P1_3  = P1^3;
  42          
  43          /*
  44           * MAIN
  45           */
  46          
  47          
  48          void main (void) {  
  49   1        OSInit();
  50   1       
  51   1              t1.ID = '1';
  52   1              t1.wait = 0;
  53   1              t1.Sem = OSSemCreate(0);  
C51 COMPILER V9.02   TASKS                                                                 02/17/2017 11:57:46 PAGE 2   

  54   1      
  55   1              t2.ID = '2';
  56   1              t2.wait = 0;
  57   1              t2.Sem = OSSemCreate(0);
  58   1      
  59   1              t3.ID = '3';
  60   1              t3.wait = 50;
  61   1              t3.Sem = OSSemCreate(0);
  62   1      
  63   1              sems.sem1 = t1.Sem;
  64   1              sems.sem2 = t2.Sem;
  65   1              sems.sem3 = t3.Sem;
  66   1      
  67   1      OSTaskCreate(InitTask, (void *)0, (void *)&InitTaskStk[TASK_STK_SIZE - 1], 0);
  68   1      
  69   1        OSStart();
  70   1      }
  71          
  72          /*
  73           * STARTUP TASK
  74           */
  75          void InitTask (void *args) KCREENTRANT
  76          {
  77   1        args = args;
  78   1      
  79   1        /* init the system */
  80   1        initSystem();
  81   1          SetupComms();
  82   1      
  83   1      
  84   1        OSTaskCreate(Task1, (void *) &t1, (void *)&TaskStk[0][TASK_STK_SIZE - 1], 1);
  85   1        OSTaskCreate(Task1, (void *) &t2, (void *)&TaskStk[1][TASK_STK_SIZE - 1], 2);
  86   1        OSTaskCreate(Task1, (void *) &t3, (void *)&TaskStk[2][TASK_STK_SIZE - 1], 3);
  87   1        OSTaskCreate(Task2, (void *) &sems, (void *)&TaskStk[3][TASK_STK_SIZE - 1], 4);
  88   1      
  89   1        while(1)
  90   1        {
  91   2          OSCtxSwCtr = 0;
  92   2          OSTimeDlyHMSM(0,0,2,0);
  93   2              P1_0 = ~P1_0;
  94   2              OSTimeDlyHMSM(0,0,2,0);
  95   2              P1_1 = ~P1_1;
  96   2              OSTimeDlyHMSM(0,0,2,0);
  97   2              P1_2 = ~P1_2;
  98   2        }
  99   1      }
 100          
 101          /*
 102           * TASKS
 103           */
 104          void Task1(void *args) KCREENTRANT
 105          {
 106   1        struct TASK_PARAM* tStruct = args;
 107   1        //args = args;
 108   1      
 109   1        while(1)
 110   1        {     
 111   2         OSSemPend (tStruct->Sem, tStruct->wait, &tStruct->err);   
 112   2         switch(tStruct->ID) {
 113   3         case '1' :
 114   3         case '2' : 
 115   3              if(tStruct->err == OS_NO_ERR) {
C51 COMPILER V9.02   TASKS                                                                 02/17/2017 11:57:46 PAGE 3   

 116   4                      SendChar(tStruct->ID);
 117   4              //      tStruct->err = 1;
 118   4              }
 119   3              break;
 120   3              case '3':
 121   3              if(tStruct->err == OS_NO_ERR){
 122   4                      SendChar(tStruct->ID);
 123   4              } else if (tStruct->err == OS_TIMEOUT) {
 124   4                        SendChar('T'); 
 125   4                      }
 126   3              break;
 127   3              }        
 128   2          OSTimeDly(100);                          
 129   2        }
 130   1      }
 131          
 132          void Task2(void *args) KCREENTRANT
 133          {
 134   1        struct TASK_SEMS* semaphores = args;
 135   1              // initialise
 136   1              p0 = P1_0;
 137   1              p1 = P1_1;
 138   1              p2 = P1_2;
 139   1        while(1)
 140   1        {
 141   2      
 142   2      
 143   2               if(p0 == 0 && P1_0 == 1) {
 144   3                      OSSemPost(semaphores->sem1);
 145   3               }
 146   2               if (p1 == 1 && P1_1 == 0) {
 147   3                      OSSemPost(semaphores->sem2);
 148   3               }
 149   2               if (P1_2 == 0 && i == 1) {
 150   3                      OSSemPost(semaphores->sem3);
 151   3                      i = 0;
 152   3               }
 153   2               if (p2 == 0 && P1_2 == 1) {
 154   3                      i = 1;
 155   3               }
 156   2              p0 = P1_0;
 157   2              p1 = P1_1;
 158   2              p2 = P1_2;
 159   2               OSTimeDly(100);
 160   2        }
 161   1      }
 162                    /**
 163          * T1 -> pend Sem1
 164          * T2 -> pend sem2
 165          * T3 -> pend sem3
 166          * T4 looks at port 4 and watches bits 0, 1 and 2
 167          * if b0 has a positive transition it posts to sem1
 168          * if b1 has a negative transition it posts to sem2
 169          * if b2 has a positive and a negative transition then it posts to sem3
 170          * each task just outputs the task number when they run
 171          * t3 will also output a timeout after one second if nothing comes in
 172          * the first three tasks are effectively the same code and so can be the same task code block
 173          * OS_EVENT *OSSemCreate (INT16U value); // create a semaphore with an initial value
 174          * OSSemPend for the first 3 tasks
 175          * OSSemPost for the 4th task
 176          
 177          typedef struct TASK_PARAM {
C51 COMPILER V9.02   TASKS                                                                 02/17/2017 11:57:46 PAGE 4   

 178                  char ID;  // Task id
 179                  INT8U wait;      // timeout/delay       
 180                  OS_EVENT* Sem; // Semaphore to use
 181          }TaskParam
 182          *
 183          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    798    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    351    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
